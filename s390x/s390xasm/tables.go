// Code generated by s390xmap -fmt=decoder s390x.csv DO NOT EDIT.

package s390xasm

const (
	_ Op = iota
	A
	AR
	ARK
	AY
	AG
	AGR
	AGRK
	AGF
	AGFR
	AXBR
	AXTR
	AXTRA
	ADB
	ADBR
	ADTR
	ADTRA
	AEB
	AEBR
	AP
	AH
	AHY
	AGH
	AHI
	AGHI
	AHHHR
	AHHLR
	AFI
	AHIK
	ASI
	AGHIK
	AGFI
	AGSI
	AIH
	AL
	ALR
	ALRK
	ALY
	ALG
	ALGR
	ALGRK
	ALGF
	ALGFR
	ALHHHR
	ALHHLR
	ALFI
	ALGFI
	ALC
	ALCR
	ALCG
	ALCGR
	ALHSIK
	ALSI
	ALGHSIK
	ALGSI
	ALSIH
	ALSIHN
	AXR
	AD
	ADR
	AE
	AER
	AW
	AWR
	AU
	AUR
	N
	NR
	NRK
	NY
	NG
	NGR
	NGRK
	NC
	NI
	NIY
	NIHH
	NIHL
	NIHF
	NILH
	NILL
	NILF
	NCRK
	NCGRK
	BAL
	BALR
	BAS
	BASR
	BASSM
	BSA
	BSM
	BAKR
	BSG
	BIC
	BC
	BCR
	BCT
	BCTR
	BCTG
	BCTGR
	BXH
	BXHG
	BXLE
	BXLEG
	BPP
	BPRP
	BRAS
	BRASL
	BRC
	BRCL
	BRCT
	BRCTG
	BRCTH
	BRXH
	BRXHG
	BRXLE
	BRXLG
	XSCH
	CKSM
	KM
	KMA
	KMC
	KMF
	KMCTR
	KMO
	CSCH
	C
	CR
	CY
	CG
	CGR
	CGF
	CGFR
	CXBR
	CXTR
	CXR
	CDB
	CDBR
	CDTR
	CD
	CDR
	CEB
	CEBR
	CE
	CER
	CRB
	CGRB
	CRJ
	CGRJ
	CFC
	CRDTE
	KXBR
	KXTR
	KDB
	KDBR
	KDTR
	KEB
	KEBR
	CS
	CSY
	CSG
	CSP
	CSPG
	CSST
	CRT
	CGRT
	CEXTR
	CEDTR
	CP
	CDS
	CDSY
	CDSG
	CH
	CHY
	CGH
	CHHSI
	CHI
	CHSI
	CGHI
	CGHSI
	CHRL
	CGHRL
	CHF
	CHHR
	CHLR
	CFI
	CGFI
	CIB
	CGIB
	CIJ
	CGIJ
	CIT
	CGIT
	CIH
	CL
	CLR
	CLY
	CLG
	CLGR
	CLGF
	CLGFR
	CLC
	CLI
	CLIY
	CLRB
	CLGRB
	CLRJ
	CLGRJ
	CLRT
	CLT
	CLGRT
	CLGT
	CLMH
	CLM
	CLMY
	CLHF
	CLHHR
	CLHLR
	CLHHSI
	CLFI
	CLFHSI
	CLGHSI
	CLGFI
	CLIB
	CLGIB
	CLIJ
	CLGIJ
	CLFIT
	CLGIT
	CLIH
	CLCL
	CLCLE
	CLCLU
	CLRL
	CLHRL
	CLGRL
	CLGHRL
	CLGFRL
	CLST
	CRL
	CGRL
	CGFRL
	CUSE
	CMPSC
	KDSA
	KIMD
	KLMD
	KMAC
	THDR
	THDER
	CXFBR
	CXFBRA
	CXFTR
	CXFR
	CDFBR
	CDFBRA
	CDFTR
	CDFR
	CEFBR
	CEFBRA
	CEFR
	CXGBR
	CXGBRA
	CXGTR
	CXGTRA
	CXGR
	CDGBR
	CDGBRA
	CDGTR
	CDGTRA
	CDGR
	CEGBR
	CEGBRA
	CEGR
	CXLFBR
	CXLFTR
	CDLFBR
	CDLFTR
	CELFBR
	CXLGBR
	CXLGTR
	CDLGBR
	CDLGTR
	CELGBR
	CXPT
	CDPT
	CXSTR
	CDSTR
	CXUTR
	CDUTR
	CXZT
	CDZT
	TBEDR
	TBDR
	CVB
	CVBY
	CVBG
	CVD
	CVDY
	CVDG
	CFXBR
	CFXBRA
	CGXBR
	CGXBRA
	CFXTR
	CGXTR
	CGXTRA
	CFXR
	CGXR
	CFDBR
	CFDBRA
	CGDBR
	CGDBRA
	CFDTR
	CGDTR
	CGDTRA
	CFDR
	CGDR
	CFEBR
	CFEBRA
	CGEBR
	CGEBRA
	CFER
	CGER
	CLFXBR
	CLGXBR
	CLFXTR
	CLGXTR
	CLFDBR
	CLGDBR
	CLFDTR
	CLGDTR
	CLFEBR
	CLGEBR
	CPXT
	CPDT
	CSXTR
	CSDTR
	CUXTR
	CUDTR
	CZXT
	CZDT
	CUUTF
	CU24
	CU21
	CUTFU
	CU12
	CU14
	CU42
	CU41
	CPYA
	CPSDR
	VSCSHP
	VSCHP
	DFLTCC
	D
	DR
	DXBR
	DXTR
	DXTRA
	DXR
	DDB
	DDBR
	DDTR
	DDTRA
	DD
	DDR
	DEB
	DEBR
	DE
	DER
	DP
	DL
	DLR
	DLG
	DLGR
	DSG
	DSGR
	DSGF
	DSGFR
	DIDBR
	DIEBR
	ED
	EDMK
	X
	XR
	XRK
	XY
	XG
	XGR
	XGRK
	XC
	XI
	XIY
	XIHF
	XILF
	EX
	EXRL
	EAR
	ESEA
	EEXTR
	EEDTR
	ECAG
	ECTG
	EFPC
	EPAR
	EPAIR
	EPSW
	ESAR
	ESAIR
	ESXTR
	ESDTR
	EREG
	EREGG
	ESTA
	ETND
	FLOGR
	HSCH
	HDR
	HER
	IAC
	IEXTR
	IEDTR
	IC
	ICY
	ICMH
	ICM
	ICMY
	IIHH
	IIHL
	IIHF
	IILH
	IILL
	IILF
	IPM
	IPK
	IRBM
	ISKE
	IVSK
	IDTE
	IPTE
	L
	LR
	LY
	LG
	LGR
	LGF
	LGFR
	LXR
	LD
	LDR
	LDY
	LE
	LER
	LEY
	LAM
	LAY
	LAE
	LAEY
	LARL
	LASP
	LAA
	LAAG
	LAAL
	LAALG
	LAN
	LANG
	LAX
	LAXG
	LAO
	LAOG
	LT
	LTR
	LTG
	LTGR
	LTGF
	LTGFR
	LTXBR
	LTXTR
	LTXR
	LTDBR
	LTDTR
	LTDR
	LTEBR
	LTER
	LAT
	LGAT
	LZRF
	LZRG
	LBEAR
	LB
	LBR
	LGB
	LGBR
	LBH
	LCR
	LCGR
	LCGFR
	LCXBR
	LCXR
	LCDBR
	LCDR
	LCDFR
	LCEBR
	LCER
	LCTL
	LCTLG
	LCBB
	FIXBR
	FIXBRA
	FIXTR
	FIXR
	FIDBR
	FIDBRA
	FIDTR
	FIDR
	FIEBR
	FIEBRA
	FIER
	LFPC
	LFAS
	LDGR
	LGDR
	LGG
	LGSC
	LH
	LHR
	LHY
	LGH
	LGHR
	LHH
	LOCHHI
	LHI
	LGHI
	LOCHI
	LOCGHI
	LHRL
	LGHRL
	LFH
	LFHAT
	LOCFH
	LOCFHR
	LGFI
	LXDB
	LXDBR
	LXDTR
	LXD
	LXDR
	LXEB
	LXEBR
	LXE
	LXER
	LDEB
	LDEBR
	LDETR
	LDE
	LDER
	LLGF
	LLGFR
	LLGFSG
	LLGFAT
	LLZRGF
	LLC
	LLCR
	LLGC
	LLGCR
	LLCH
	LLH
	LLHR
	LLGH
	LLGHR
	LLHH
	LLHRL
	LLGHRL
	LLIHH
	LLIHL
	LLIHF
	LLILH
	LLILL
	LLILF
	LLGFRL
	LLGT
	LLGTR
	LLGTAT
	LM
	LMY
	LMG
	LMD
	LMH
	LNR
	LNGR
	LNGFR
	LNXBR
	LNXR
	LNDBR
	LNDR
	LNDFR
	LNEBR
	LNER
	LOC
	LOCR
	LOCG
	LOCGR
	LPTEA
	LPD
	LPDG
	LPQ
	LPR
	LPGR
	LPGFR
	LPXBR
	LPXR
	LPDBR
	LPDR
	LPDFR
	LPEBR
	LPER
	LPSW
	LPSWE
	LPSWEY
	LRA
	LRAY
	LRAG
	LRL
	LGRL
	LGFRL
	LRVH
	LRV
	LRVR
	LRVG
	LRVGR
	LDXBR
	LDXBRA
	LDXTR
	LDXR
	LRDR
	LEXBR
	LEXBRA
	LEXR
	LEDBR
	LEDBRA
	LEDTR
	LEDR
	LRER
	LURA
	LURAG
	LZXR
	LZDR
	LZER
	MSTA
	MSCH
	MC
	MVHHI
	MVHI
	MVGHI
	MVC
	MVI
	MVIY
	MVCIN
	MVCL
	MVCLE
	MVCLU
	MVN
	MVPG
	MVCRL
	MVST
	MVCP
	MVCS
	MVCDK
	MVCK
	MVO
	MVCOS
	MVCSK
	MVZ
	MG
	MGRK
	M
	MFY
	MR
	MXBR
	MXTR
	MXTRA
	MXR
	MDB
	MDBR
	MDTR
	MDTRA
	MD
	MDR
	MXDB
	MXDBR
	MXD
	MXDR
	MEEB
	MEEBR
	MEE
	MEER
	MDEB
	MDEBR
	MDE
	MDER
	ME
	MER
	MAY
	MAYR
	MADB
	MADBR
	MAD
	MADR
	MAEB
	MAEBR
	MAE
	MAER
	MAYH
	MAYHR
	MAYL
	MAYLR
	MSDB
	MSDBR
	MSD
	MSDR
	MSEB
	MSEBR
	MSE
	MSER
	MP
	MH
	MHY
	MGH
	MHI
	MGHI
	MLG
	MLGR
	ML
	MLR
	MS
	MSC
	MSR
	MSRKC
	MSY
	MSG
	MSGC
	MSGR
	MSGRKC
	MSGF
	MSGFR
	MSFI
	MSGFI
	MYH
	MYHR
	MYL
	MYLR
	MY
	MYR
	NNRK
	NNGRK
	NNPA
	NIAI
	NTSTG
	NORK
	NOGRK
	NXRK
	NXGRK
	O
	OR
	ORK
	OY
	OG
	OGR
	OGRK
	OC
	OI
	OIY
	OIHH
	OIHL
	OIHF
	OILH
	OILL
	OILF
	OCRK
	OCGRK
	PACK
	PKA
	PKU
	PGIN
	PGOUT
	PCC
	PCKMO
	PFPO
	PFMF
	PLO
	PPA
	PPNO
	PRNO
	PTFF
	PTF
	POPCNT
	PFD
	PFDRL
	PC
	PR
	PT
	PTI
	PALB
	PTLB
	QAXTR
	QADTR
	QPACI
	RRXTR
	RRDTR
	RCHP
	RDP
	RRBE
	RRBM
	RP
	RSCH
	RLL
	RLLG
	RNSBG
	RXSBG
	RISBG
	RISBGN
	RISBHG
	RISBLG
	ROSBG
	SRST
	SRSTU
	SELR
	SELGR
	SELFHR
	SAR
	SAL
	SAC
	SACF
	SAM24
	SAM31
	SAM64
	SRNM
	SRNMB
	SCHM
	SCK
	SCKC
	SCKPF
	SPT
	SRNMT
	SFPC
	SFASR
	SPX
	SPM
	SPKA
	SSAR
	SSAIR
	SSKE
	SSM
	SRP
	SLDA
	SLDL
	SLA
	SLAK
	SLAG
	SLL
	SLLK
	SLLG
	SRDA
	SRDL
	SRA
	SRAK
	SRAG
	SRL
	SRLK
	SRLG
	SLXT
	SLDT
	SRXT
	SRDT
	SIGP
	SORTL
	SQXBR
	SQXR
	SQDB
	SQDBR
	SQD
	SQDR
	SQEB
	SQEBR
	SQE
	SQER
	SSCH
	ST
	STY
	STG
	STD
	STDY
	STE
	STEY
	STAM
	STAMY
	STBEAR
	STCPS
	STCRW
	STC
	STCY
	STCH
	STCMH
	STCM
	STCMY
	STCK
	STCKC
	STCKE
	STCKF
	STCTL
	STCTG
	STAP
	STIDP
	STPT
	STFL
	STFLE
	STFPC
	STGSC
	STH
	STHY
	STHH
	STHRL
	STFH
	STOCFH
	STM
	STMY
	STMG
	STMH
	STOC
	STOCG
	STPQ
	STPX
	STRAG
	STRL
	STGRL
	STRVH
	STRV
	STRVG
	STSCH
	STSI
	STNSM
	STOSM
	STURA
	STURG
	S
	SR
	SRK
	SY
	SG
	SGR
	SGRK
	SGF
	SGFR
	SXBR
	SXTR
	SXTRA
	SDB
	SDBR
	SDTR
	SDTRA
	SEB
	SEBR
	SP
	SH
	SHY
	SGH
	SHHHR
	SHHLR
	SL
	SLR
	SLRK
	SLY
	SLG
	SLGR
	SLGRK
	SLGF
	SLGFR
	SLHHHR
	SLHHLR
	SLFI
	SLGFI
	SLB
	SLBR
	SLBG
	SLBGR
	SXR
	SD
	SDR
	SE
	SER
	SW
	SWR
	SU
	SUR
	SVC
	TAR
	TAM
	TS
	TB
	TCXB
	TDCXT
	TCDB
	TDCDT
	TCEB
	TDCET
	TDGXT
	TDGDT
	TDGET
	TP
	TPEI
	TPI
	TPROT
	TSCH
	TM
	TMY
	TMHH
	TMHL
	TMLH
	TMLL
	TMH
	TML
	TRACE
	TRACG
	TABORT
	TBEGINC
	TBEGIN
	TEND
	TR
	TRT
	TRTE
	TRTR
	TRTRE
	TRE
	TROO
	TROT
	TRTO
	TRTT
	TRAP2
	TRAP4
	UNPK
	UNPKA
	UNPKU
	UPT
	VA
	VACC
	VAP
	VAC
	VACCC
	VN
	VNC
	VAVG
	VAVGL
	VBPERM
	VCKSM
	VCP
	VCEQ
	VCH
	VCHL
	VCSPH
	VCVB
	VCVBG
	VCVD
	VCVDG
	VCLZDP
	VCLZ
	VCTZ
	VDP
	VEC
	VECL
	VERIM
	VERLL
	VERLLV
	VESLV
	VESL
	VESRA
	VESRAV
	VESRL
	VESRLV
	VX
	VFAE
	VFEE
	VFENE
	VFA
	WFK
	VFCE
	VFCH
	VFCHE
	WFC
	VCLFNH
	VCLFNL
	VCRNF
	VCFPS
	VCDG
	VCFPL
	VCDLG
	VCFN
	VCSFP
	VCGD
	VCLFP
	VCLGD
	VCNF
	VFD
	VFLL
	VFLR
	VFMAX
	VFMIN
	VFM
	VFMA
	VFMS
	VFNMA
	VFNMS
	VFPSO
	VFSQ
	VFS
	VFTCI
	VGFM
	VGFMA
	VGEF
	VGEG
	VGBM
	VGM
	VISTR
	VL
	VLR
	VLREP
	VLEBRH
	VLEBRF
	VLEBRG
	VLBRREP
	VLLEBRZ
	VLBR
	VLC
	VLEH
	VLEF
	VLEG
	VLEB
	VLEIH
	VLEIF
	VLEIG
	VLEIB
	VLER
	VFI
	VLGV
	VLIP
	VLLEZ
	VLM
	VLP
	VLRL
	VLRLR
	VLBB
	VLVG
	VLVGP
	VLL
	VMX
	VMXL
	VMRH
	VMRL
	VMN
	VMNL
	VMAE
	VMAH
	VMALE
	VMALH
	VMALO
	VMAL
	VMAO
	VMSP
	VMP
	VME
	VMH
	VMLE
	VMLH
	VMLO
	VML
	VMO
	VMSL
	VNN
	VNO
	VNX
	VO
	VOC
	VPK
	VPKLS
	VPKS
	VPKZ
	VPKZR
	VPSOP
	VPERM
	VPDI
	VPOPCT
	VRP
	VREP
	VREPI
	VSCEF
	VSCEG
	VSEL
	VSDP
	VSRP
	VSRPR
	VSL
	VSLB
	VSLD
	VSLDB
	VSRA
	VSRAB
	VSRD
	VSRL
	VSRLB
	VSEG
	VST
	VSTEBRH
	VSTEBRF
	VSTEBRG
	VSTBR
	VSTEH
	VSTEF
	VSTEG
	VSTEB
	VSTER
	VSTM
	VSTRL
	VSTRLR
	VSTL
	VSTRC
	VSTRS
	VS
	VSCBI
	VSP
	VSBCBI
	VSBI
	VSUMG
	VSUMQ
	VSUM
	VTP
	VTM
	VUPH
	VUPLH
	VUPLL
	VUPL
	VUPKZ
	VUPKZH
	VUPKZL
	ZAP
)

var opstr = [...]string{
	A:       "A",
	AR:      "AR",
	ARK:     "ARK",
	AY:      "AY",
	AG:      "AG",
	AGR:     "AGR",
	AGRK:    "AGRK",
	AGF:     "AGF",
	AGFR:    "AGFR",
	AXBR:    "AXBR",
	AXTR:    "AXTR",
	AXTRA:   "AXTRA",
	ADB:     "ADB",
	ADBR:    "ADBR",
	ADTR:    "ADTR",
	ADTRA:   "ADTRA",
	AEB:     "AEB",
	AEBR:    "AEBR",
	AP:      "AP",
	AH:      "AH",
	AHY:     "AHY",
	AGH:     "AGH",
	AHI:     "AHI",
	AGHI:    "AGHI",
	AHHHR:   "AHHHR",
	AHHLR:   "AHHLR",
	AFI:     "AFI",
	AHIK:    "AHIK",
	ASI:     "ASI",
	AGHIK:   "AGHIK",
	AGFI:    "AGFI",
	AGSI:    "AGSI",
	AIH:     "AIH",
	AL:      "AL",
	ALR:     "ALR",
	ALRK:    "ALRK",
	ALY:     "ALY",
	ALG:     "ALG",
	ALGR:    "ALGR",
	ALGRK:   "ALGRK",
	ALGF:    "ALGF",
	ALGFR:   "ALGFR",
	ALHHHR:  "ALHHHR",
	ALHHLR:  "ALHHLR",
	ALFI:    "ALFI",
	ALGFI:   "ALGFI",
	ALC:     "ALC",
	ALCR:    "ALCR",
	ALCG:    "ALCG",
	ALCGR:   "ALCGR",
	ALHSIK:  "ALHSIK",
	ALSI:    "ALSI",
	ALGHSIK: "ALGHSIK",
	ALGSI:   "ALGSI",
	ALSIH:   "ALSIH",
	ALSIHN:  "ALSIHN",
	AXR:     "AXR",
	AD:      "AD",
	ADR:     "ADR",
	AE:      "AE",
	AER:     "AER",
	AW:      "AW",
	AWR:     "AWR",
	AU:      "AU",
	AUR:     "AUR",
	N:       "N",
	NR:      "NR",
	NRK:     "NRK",
	NY:      "NY",
	NG:      "NG",
	NGR:     "NGR",
	NGRK:    "NGRK",
	NC:      "NC",
	NI:      "NI",
	NIY:     "NIY",
	NIHH:    "NIHH",
	NIHL:    "NIHL",
	NIHF:    "NIHF",
	NILH:    "NILH",
	NILL:    "NILL",
	NILF:    "NILF",
	NCRK:    "NCRK",
	NCGRK:   "NCGRK",
	BAL:     "BAL",
	BALR:    "BALR",
	BAS:     "BAS",
	BASR:    "BASR",
	BASSM:   "BASSM",
	BSA:     "BSA",
	BSM:     "BSM",
	BAKR:    "BAKR",
	BSG:     "BSG",
	BIC:     "BIC",
	BC:      "BC",
	BCR:     "BCR",
	BCT:     "BCT",
	BCTR:    "BCTR",
	BCTG:    "BCTG",
	BCTGR:   "BCTGR",
	BXH:     "BXH",
	BXHG:    "BXHG",
	BXLE:    "BXLE",
	BXLEG:   "BXLEG",
	BPP:     "BPP",
	BPRP:    "BPRP",
	BRAS:    "BRAS",
	BRASL:   "BRASL",
	BRC:     "BRC",
	BRCL:    "BRCL",
	BRCT:    "BRCT",
	BRCTG:   "BRCTG",
	BRCTH:   "BRCTH",
	BRXH:    "BRXH",
	BRXHG:   "BRXHG",
	BRXLE:   "BRXLE",
	BRXLG:   "BRXLG",
	XSCH:    "XSCH",
	CKSM:    "CKSM",
	KM:      "KM",
	KMA:     "KMA",
	KMC:     "KMC",
	KMF:     "KMF",
	KMCTR:   "KMCTR",
	KMO:     "KMO",
	CSCH:    "CSCH",
	C:       "C",
	CR:      "CR",
	CY:      "CY",
	CG:      "CG",
	CGR:     "CGR",
	CGF:     "CGF",
	CGFR:    "CGFR",
	CXBR:    "CXBR",
	CXTR:    "CXTR",
	CXR:     "CXR",
	CDB:     "CDB",
	CDBR:    "CDBR",
	CDTR:    "CDTR",
	CD:      "CD",
	CDR:     "CDR",
	CEB:     "CEB",
	CEBR:    "CEBR",
	CE:      "CE",
	CER:     "CER",
	CRB:     "CRB",
	CGRB:    "CGRB",
	CRJ:     "CRJ",
	CGRJ:    "CGRJ",
	CFC:     "CFC",
	CRDTE:   "CRDTE",
	KXBR:    "KXBR",
	KXTR:    "KXTR",
	KDB:     "KDB",
	KDBR:    "KDBR",
	KDTR:    "KDTR",
	KEB:     "KEB",
	KEBR:    "KEBR",
	CS:      "CS",
	CSY:     "CSY",
	CSG:     "CSG",
	CSP:     "CSP",
	CSPG:    "CSPG",
	CSST:    "CSST",
	CRT:     "CRT",
	CGRT:    "CGRT",
	CEXTR:   "CEXTR",
	CEDTR:   "CEDTR",
	CP:      "CP",
	CDS:     "CDS",
	CDSY:    "CDSY",
	CDSG:    "CDSG",
	CH:      "CH",
	CHY:     "CHY",
	CGH:     "CGH",
	CHHSI:   "CHHSI",
	CHI:     "CHI",
	CHSI:    "CHSI",
	CGHI:    "CGHI",
	CGHSI:   "CGHSI",
	CHRL:    "CHRL",
	CGHRL:   "CGHRL",
	CHF:     "CHF",
	CHHR:    "CHHR",
	CHLR:    "CHLR",
	CFI:     "CFI",
	CGFI:    "CGFI",
	CIB:     "CIB",
	CGIB:    "CGIB",
	CIJ:     "CIJ",
	CGIJ:    "CGIJ",
	CIT:     "CIT",
	CGIT:    "CGIT",
	CIH:     "CIH",
	CL:      "CL",
	CLR:     "CLR",
	CLY:     "CLY",
	CLG:     "CLG",
	CLGR:    "CLGR",
	CLGF:    "CLGF",
	CLGFR:   "CLGFR",
	CLC:     "CLC",
	CLI:     "CLI",
	CLIY:    "CLIY",
	CLRB:    "CLRB",
	CLGRB:   "CLGRB",
	CLRJ:    "CLRJ",
	CLGRJ:   "CLGRJ",
	CLRT:    "CLRT",
	CLT:     "CLT",
	CLGRT:   "CLGRT",
	CLGT:    "CLGT",
	CLMH:    "CLMH",
	CLM:     "CLM",
	CLMY:    "CLMY",
	CLHF:    "CLHF",
	CLHHR:   "CLHHR",
	CLHLR:   "CLHLR",
	CLHHSI:  "CLHHSI",
	CLFI:    "CLFI",
	CLFHSI:  "CLFHSI",
	CLGHSI:  "CLGHSI",
	CLGFI:   "CLGFI",
	CLIB:    "CLIB",
	CLGIB:   "CLGIB",
	CLIJ:    "CLIJ",
	CLGIJ:   "CLGIJ",
	CLFIT:   "CLFIT",
	CLGIT:   "CLGIT",
	CLIH:    "CLIH",
	CLCL:    "CLCL",
	CLCLE:   "CLCLE",
	CLCLU:   "CLCLU",
	CLRL:    "CLRL",
	CLHRL:   "CLHRL",
	CLGRL:   "CLGRL",
	CLGHRL:  "CLGHRL",
	CLGFRL:  "CLGFRL",
	CLST:    "CLST",
	CRL:     "CRL",
	CGRL:    "CGRL",
	CGFRL:   "CGFRL",
	CUSE:    "CUSE",
	CMPSC:   "CMPSC",
	KDSA:    "KDSA",
	KIMD:    "KIMD",
	KLMD:    "KLMD",
	KMAC:    "KMAC",
	THDR:    "THDR",
	THDER:   "THDER",
	CXFBR:   "CXFBR",
	CXFBRA:  "CXFBRA",
	CXFTR:   "CXFTR",
	CXFR:    "CXFR",
	CDFBR:   "CDFBR",
	CDFBRA:  "CDFBRA",
	CDFTR:   "CDFTR",
	CDFR:    "CDFR",
	CEFBR:   "CEFBR",
	CEFBRA:  "CEFBRA",
	CEFR:    "CEFR",
	CXGBR:   "CXGBR",
	CXGBRA:  "CXGBRA",
	CXGTR:   "CXGTR",
	CXGTRA:  "CXGTRA",
	CXGR:    "CXGR",
	CDGBR:   "CDGBR",
	CDGBRA:  "CDGBRA",
	CDGTR:   "CDGTR",
	CDGTRA:  "CDGTRA",
	CDGR:    "CDGR",
	CEGBR:   "CEGBR",
	CEGBRA:  "CEGBRA",
	CEGR:    "CEGR",
	CXLFBR:  "CXLFBR",
	CXLFTR:  "CXLFTR",
	CDLFBR:  "CDLFBR",
	CDLFTR:  "CDLFTR",
	CELFBR:  "CELFBR",
	CXLGBR:  "CXLGBR",
	CXLGTR:  "CXLGTR",
	CDLGBR:  "CDLGBR",
	CDLGTR:  "CDLGTR",
	CELGBR:  "CELGBR",
	CXPT:    "CXPT",
	CDPT:    "CDPT",
	CXSTR:   "CXSTR",
	CDSTR:   "CDSTR",
	CXUTR:   "CXUTR",
	CDUTR:   "CDUTR",
	CXZT:    "CXZT",
	CDZT:    "CDZT",
	TBEDR:   "TBEDR",
	TBDR:    "TBDR",
	CVB:     "CVB",
	CVBY:    "CVBY",
	CVBG:    "CVBG",
	CVD:     "CVD",
	CVDY:    "CVDY",
	CVDG:    "CVDG",
	CFXBR:   "CFXBR",
	CFXBRA:  "CFXBRA",
	CGXBR:   "CGXBR",
	CGXBRA:  "CGXBRA",
	CFXTR:   "CFXTR",
	CGXTR:   "CGXTR",
	CGXTRA:  "CGXTRA",
	CFXR:    "CFXR",
	CGXR:    "CGXR",
	CFDBR:   "CFDBR",
	CFDBRA:  "CFDBRA",
	CGDBR:   "CGDBR",
	CGDBRA:  "CGDBRA",
	CFDTR:   "CFDTR",
	CGDTR:   "CGDTR",
	CGDTRA:  "CGDTRA",
	CFDR:    "CFDR",
	CGDR:    "CGDR",
	CFEBR:   "CFEBR",
	CFEBRA:  "CFEBRA",
	CGEBR:   "CGEBR",
	CGEBRA:  "CGEBRA",
	CFER:    "CFER",
	CGER:    "CGER",
	CLFXBR:  "CLFXBR",
	CLGXBR:  "CLGXBR",
	CLFXTR:  "CLFXTR",
	CLGXTR:  "CLGXTR",
	CLFDBR:  "CLFDBR",
	CLGDBR:  "CLGDBR",
	CLFDTR:  "CLFDTR",
	CLGDTR:  "CLGDTR",
	CLFEBR:  "CLFEBR",
	CLGEBR:  "CLGEBR",
	CPXT:    "CPXT",
	CPDT:    "CPDT",
	CSXTR:   "CSXTR",
	CSDTR:   "CSDTR",
	CUXTR:   "CUXTR",
	CUDTR:   "CUDTR",
	CZXT:    "CZXT",
	CZDT:    "CZDT",
	CUUTF:   "CUUTF",
	CU24:    "CU24",
	CU21:    "CU21",
	CUTFU:   "CUTFU",
	CU12:    "CU12",
	CU14:    "CU14",
	CU42:    "CU42",
	CU41:    "CU41",
	CPYA:    "CPYA",
	CPSDR:   "CPSDR",
	VSCSHP:  "VSCSHP",
	VSCHP:   "VSCHP",
	DFLTCC:  "DFLTCC",
	D:       "D",
	DR:      "DR",
	DXBR:    "DXBR",
	DXTR:    "DXTR",
	DXTRA:   "DXTRA",
	DXR:     "DXR",
	DDB:     "DDB",
	DDBR:    "DDBR",
	DDTR:    "DDTR",
	DDTRA:   "DDTRA",
	DD:      "DD",
	DDR:     "DDR",
	DEB:     "DEB",
	DEBR:    "DEBR",
	DE:      "DE",
	DER:     "DER",
	DP:      "DP",
	DL:      "DL",
	DLR:     "DLR",
	DLG:     "DLG",
	DLGR:    "DLGR",
	DSG:     "DSG",
	DSGR:    "DSGR",
	DSGF:    "DSGF",
	DSGFR:   "DSGFR",
	DIDBR:   "DIDBR",
	DIEBR:   "DIEBR",
	ED:      "ED",
	EDMK:    "EDMK",
	X:       "X",
	XR:      "XR",
	XRK:     "XRK",
	XY:      "XY",
	XG:      "XG",
	XGR:     "XGR",
	XGRK:    "XGRK",
	XC:      "XC",
	XI:      "XI",
	XIY:     "XIY",
	XIHF:    "XIHF",
	XILF:    "XILF",
	EX:      "EX",
	EXRL:    "EXRL",
	EAR:     "EAR",
	ESEA:    "ESEA",
	EEXTR:   "EEXTR",
	EEDTR:   "EEDTR",
	ECAG:    "ECAG",
	ECTG:    "ECTG",
	EFPC:    "EFPC",
	EPAR:    "EPAR",
	EPAIR:   "EPAIR",
	EPSW:    "EPSW",
	ESAR:    "ESAR",
	ESAIR:   "ESAIR",
	ESXTR:   "ESXTR",
	ESDTR:   "ESDTR",
	EREG:    "EREG",
	EREGG:   "EREGG",
	ESTA:    "ESTA",
	ETND:    "ETND",
	FLOGR:   "FLOGR",
	HSCH:    "HSCH",
	HDR:     "HDR",
	HER:     "HER",
	IAC:     "IAC",
	IEXTR:   "IEXTR",
	IEDTR:   "IEDTR",
	IC:      "IC",
	ICY:     "ICY",
	ICMH:    "ICMH",
	ICM:     "ICM",
	ICMY:    "ICMY",
	IIHH:    "IIHH",
	IIHL:    "IIHL",
	IIHF:    "IIHF",
	IILH:    "IILH",
	IILL:    "IILL",
	IILF:    "IILF",
	IPM:     "IPM",
	IPK:     "IPK",
	IRBM:    "IRBM",
	ISKE:    "ISKE",
	IVSK:    "IVSK",
	IDTE:    "IDTE",
	IPTE:    "IPTE",
	L:       "L",
	LR:      "LR",
	LY:      "LY",
	LG:      "LG",
	LGR:     "LGR",
	LGF:     "LGF",
	LGFR:    "LGFR",
	LXR:     "LXR",
	LD:      "LD",
	LDR:     "LDR",
	LDY:     "LDY",
	LE:      "LE",
	LER:     "LER",
	LEY:     "LEY",
	LAM:     "LAM",
	LAY:     "LAY",
	LAE:     "LAE",
	LAEY:    "LAEY",
	LARL:    "LARL",
	LASP:    "LASP",
	LAA:     "LAA",
	LAAG:    "LAAG",
	LAAL:    "LAAL",
	LAALG:   "LAALG",
	LAN:     "LAN",
	LANG:    "LANG",
	LAX:     "LAX",
	LAXG:    "LAXG",
	LAO:     "LAO",
	LAOG:    "LAOG",
	LT:      "LT",
	LTR:     "LTR",
	LTG:     "LTG",
	LTGR:    "LTGR",
	LTGF:    "LTGF",
	LTGFR:   "LTGFR",
	LTXBR:   "LTXBR",
	LTXTR:   "LTXTR",
	LTXR:    "LTXR",
	LTDBR:   "LTDBR",
	LTDTR:   "LTDTR",
	LTDR:    "LTDR",
	LTEBR:   "LTEBR",
	LTER:    "LTER",
	LAT:     "LAT",
	LGAT:    "LGAT",
	LZRF:    "LZRF",
	LZRG:    "LZRG",
	LBEAR:   "LBEAR",
	LB:      "LB",
	LBR:     "LBR",
	LGB:     "LGB",
	LGBR:    "LGBR",
	LBH:     "LBH",
	LCR:     "LCR",
	LCGR:    "LCGR",
	LCGFR:   "LCGFR",
	LCXBR:   "LCXBR",
	LCXR:    "LCXR",
	LCDBR:   "LCDBR",
	LCDR:    "LCDR",
	LCDFR:   "LCDFR",
	LCEBR:   "LCEBR",
	LCER:    "LCER",
	LCTL:    "LCTL",
	LCTLG:   "LCTLG",
	LCBB:    "LCBB",
	FIXBR:   "FIXBR",
	FIXBRA:  "FIXBRA",
	FIXTR:   "FIXTR",
	FIXR:    "FIXR",
	FIDBR:   "FIDBR",
	FIDBRA:  "FIDBRA",
	FIDTR:   "FIDTR",
	FIDR:    "FIDR",
	FIEBR:   "FIEBR",
	FIEBRA:  "FIEBRA",
	FIER:    "FIER",
	LFPC:    "LFPC",
	LFAS:    "LFAS",
	LDGR:    "LDGR",
	LGDR:    "LGDR",
	LGG:     "LGG",
	LGSC:    "LGSC",
	LH:      "LH",
	LHR:     "LHR",
	LHY:     "LHY",
	LGH:     "LGH",
	LGHR:    "LGHR",
	LHH:     "LHH",
	LOCHHI:  "LOCHHI",
	LHI:     "LHI",
	LGHI:    "LGHI",
	LOCHI:   "LOCHI",
	LOCGHI:  "LOCGHI",
	LHRL:    "LHRL",
	LGHRL:   "LGHRL",
	LFH:     "LFH",
	LFHAT:   "LFHAT",
	LOCFH:   "LOCFH",
	LOCFHR:  "LOCFHR",
	LGFI:    "LGFI",
	LXDB:    "LXDB",
	LXDBR:   "LXDBR",
	LXDTR:   "LXDTR",
	LXD:     "LXD",
	LXDR:    "LXDR",
	LXEB:    "LXEB",
	LXEBR:   "LXEBR",
	LXE:     "LXE",
	LXER:    "LXER",
	LDEB:    "LDEB",
	LDEBR:   "LDEBR",
	LDETR:   "LDETR",
	LDE:     "LDE",
	LDER:    "LDER",
	LLGF:    "LLGF",
	LLGFR:   "LLGFR",
	LLGFSG:  "LLGFSG",
	LLGFAT:  "LLGFAT",
	LLZRGF:  "LLZRGF",
	LLC:     "LLC",
	LLCR:    "LLCR",
	LLGC:    "LLGC",
	LLGCR:   "LLGCR",
	LLCH:    "LLCH",
	LLH:     "LLH",
	LLHR:    "LLHR",
	LLGH:    "LLGH",
	LLGHR:   "LLGHR",
	LLHH:    "LLHH",
	LLHRL:   "LLHRL",
	LLGHRL:  "LLGHRL",
	LLIHH:   "LLIHH",
	LLIHL:   "LLIHL",
	LLIHF:   "LLIHF",
	LLILH:   "LLILH",
	LLILL:   "LLILL",
	LLILF:   "LLILF",
	LLGFRL:  "LLGFRL",
	LLGT:    "LLGT",
	LLGTR:   "LLGTR",
	LLGTAT:  "LLGTAT",
	LM:      "LM",
	LMY:     "LMY",
	LMG:     "LMG",
	LMD:     "LMD",
	LMH:     "LMH",
	LNR:     "LNR",
	LNGR:    "LNGR",
	LNGFR:   "LNGFR",
	LNXBR:   "LNXBR",
	LNXR:    "LNXR",
	LNDBR:   "LNDBR",
	LNDR:    "LNDR",
	LNDFR:   "LNDFR",
	LNEBR:   "LNEBR",
	LNER:    "LNER",
	LOC:     "LOC",
	LOCR:    "LOCR",
	LOCG:    "LOCG",
	LOCGR:   "LOCGR",
	LPTEA:   "LPTEA",
	LPD:     "LPD",
	LPDG:    "LPDG",
	LPQ:     "LPQ",
	LPR:     "LPR",
	LPGR:    "LPGR",
	LPGFR:   "LPGFR",
	LPXBR:   "LPXBR",
	LPXR:    "LPXR",
	LPDBR:   "LPDBR",
	LPDR:    "LPDR",
	LPDFR:   "LPDFR",
	LPEBR:   "LPEBR",
	LPER:    "LPER",
	LPSW:    "LPSW",
	LPSWE:   "LPSWE",
	LPSWEY:  "LPSWEY",
	LRA:     "LRA",
	LRAY:    "LRAY",
	LRAG:    "LRAG",
	LRL:     "LRL",
	LGRL:    "LGRL",
	LGFRL:   "LGFRL",
	LRVH:    "LRVH",
	LRV:     "LRV",
	LRVR:    "LRVR",
	LRVG:    "LRVG",
	LRVGR:   "LRVGR",
	LDXBR:   "LDXBR",
	LDXBRA:  "LDXBRA",
	LDXTR:   "LDXTR",
	LDXR:    "LDXR",
	LRDR:    "LRDR",
	LEXBR:   "LEXBR",
	LEXBRA:  "LEXBRA",
	LEXR:    "LEXR",
	LEDBR:   "LEDBR",
	LEDBRA:  "LEDBRA",
	LEDTR:   "LEDTR",
	LEDR:    "LEDR",
	LRER:    "LRER",
	LURA:    "LURA",
	LURAG:   "LURAG",
	LZXR:    "LZXR",
	LZDR:    "LZDR",
	LZER:    "LZER",
	MSTA:    "MSTA",
	MSCH:    "MSCH",
	MC:      "MC",
	MVHHI:   "MVHHI",
	MVHI:    "MVHI",
	MVGHI:   "MVGHI",
	MVC:     "MVC",
	MVI:     "MVI",
	MVIY:    "MVIY",
	MVCIN:   "MVCIN",
	MVCL:    "MVCL",
	MVCLE:   "MVCLE",
	MVCLU:   "MVCLU",
	MVN:     "MVN",
	MVPG:    "MVPG",
	MVCRL:   "MVCRL",
	MVST:    "MVST",
	MVCP:    "MVCP",
	MVCS:    "MVCS",
	MVCDK:   "MVCDK",
	MVCK:    "MVCK",
	MVO:     "MVO",
	MVCOS:   "MVCOS",
	MVCSK:   "MVCSK",
	MVZ:     "MVZ",
	MG:      "MG",
	MGRK:    "MGRK",
	M:       "M",
	MFY:     "MFY",
	MR:      "MR",
	MXBR:    "MXBR",
	MXTR:    "MXTR",
	MXTRA:   "MXTRA",
	MXR:     "MXR",
	MDB:     "MDB",
	MDBR:    "MDBR",
	MDTR:    "MDTR",
	MDTRA:   "MDTRA",
	MD:      "MD",
	MDR:     "MDR",
	MXDB:    "MXDB",
	MXDBR:   "MXDBR",
	MXD:     "MXD",
	MXDR:    "MXDR",
	MEEB:    "MEEB",
	MEEBR:   "MEEBR",
	MEE:     "MEE",
	MEER:    "MEER",
	MDEB:    "MDEB",
	MDEBR:   "MDEBR",
	MDE:     "MDE",
	MDER:    "MDER",
	ME:      "ME",
	MER:     "MER",
	MAY:     "MAY",
	MAYR:    "MAYR",
	MADB:    "MADB",
	MADBR:   "MADBR",
	MAD:     "MAD",
	MADR:    "MADR",
	MAEB:    "MAEB",
	MAEBR:   "MAEBR",
	MAE:     "MAE",
	MAER:    "MAER",
	MAYH:    "MAYH",
	MAYHR:   "MAYHR",
	MAYL:    "MAYL",
	MAYLR:   "MAYLR",
	MSDB:    "MSDB",
	MSDBR:   "MSDBR",
	MSD:     "MSD",
	MSDR:    "MSDR",
	MSEB:    "MSEB",
	MSEBR:   "MSEBR",
	MSE:     "MSE",
	MSER:    "MSER",
	MP:      "MP",
	MH:      "MH",
	MHY:     "MHY",
	MGH:     "MGH",
	MHI:     "MHI",
	MGHI:    "MGHI",
	MLG:     "MLG",
	MLGR:    "MLGR",
	ML:      "ML",
	MLR:     "MLR",
	MS:      "MS",
	MSC:     "MSC",
	MSR:     "MSR",
	MSRKC:   "MSRKC",
	MSY:     "MSY",
	MSG:     "MSG",
	MSGC:    "MSGC",
	MSGR:    "MSGR",
	MSGRKC:  "MSGRKC",
	MSGF:    "MSGF",
	MSGFR:   "MSGFR",
	MSFI:    "MSFI",
	MSGFI:   "MSGFI",
	MYH:     "MYH",
	MYHR:    "MYHR",
	MYL:     "MYL",
	MYLR:    "MYLR",
	MY:      "MY",
	MYR:     "MYR",
	NNRK:    "NNRK",
	NNGRK:   "NNGRK",
	NNPA:    "NNPA",
	NIAI:    "NIAI",
	NTSTG:   "NTSTG",
	NORK:    "NORK",
	NOGRK:   "NOGRK",
	NXRK:    "NXRK",
	NXGRK:   "NXGRK",
	O:       "O",
	OR:      "OR",
	ORK:     "ORK",
	OY:      "OY",
	OG:      "OG",
	OGR:     "OGR",
	OGRK:    "OGRK",
	OC:      "OC",
	OI:      "OI",
	OIY:     "OIY",
	OIHH:    "OIHH",
	OIHL:    "OIHL",
	OIHF:    "OIHF",
	OILH:    "OILH",
	OILL:    "OILL",
	OILF:    "OILF",
	OCRK:    "OCRK",
	OCGRK:   "OCGRK",
	PACK:    "PACK",
	PKA:     "PKA",
	PKU:     "PKU",
	PGIN:    "PGIN",
	PGOUT:   "PGOUT",
	PCC:     "PCC",
	PCKMO:   "PCKMO",
	PFPO:    "PFPO",
	PFMF:    "PFMF",
	PLO:     "PLO",
	PPA:     "PPA",
	PPNO:    "PPNO",
	PRNO:    "PRNO",
	PTFF:    "PTFF",
	PTF:     "PTF",
	POPCNT:  "POPCNT",
	PFD:     "PFD",
	PFDRL:   "PFDRL",
	PC:      "PC",
	PR:      "PR",
	PT:      "PT",
	PTI:     "PTI",
	PALB:    "PALB",
	PTLB:    "PTLB",
	QAXTR:   "QAXTR",
	QADTR:   "QADTR",
	QPACI:   "QPACI",
	RRXTR:   "RRXTR",
	RRDTR:   "RRDTR",
	RCHP:    "RCHP",
	RDP:     "RDP",
	RRBE:    "RRBE",
	RRBM:    "RRBM",
	RP:      "RP",
	RSCH:    "RSCH",
	RLL:     "RLL",
	RLLG:    "RLLG",
	RNSBG:   "RNSBG",
	RXSBG:   "RXSBG",
	RISBG:   "RISBG",
	RISBGN:  "RISBGN",
	RISBHG:  "RISBHG",
	RISBLG:  "RISBLG",
	ROSBG:   "ROSBG",
	SRST:    "SRST",
	SRSTU:   "SRSTU",
	SELR:    "SELR",
	SELGR:   "SELGR",
	SELFHR:  "SELFHR",
	SAR:     "SAR",
	SAL:     "SAL",
	SAC:     "SAC",
	SACF:    "SACF",
	SAM24:   "SAM24",
	SAM31:   "SAM31",
	SAM64:   "SAM64",
	SRNM:    "SRNM",
	SRNMB:   "SRNMB",
	SCHM:    "SCHM",
	SCK:     "SCK",
	SCKC:    "SCKC",
	SCKPF:   "SCKPF",
	SPT:     "SPT",
	SRNMT:   "SRNMT",
	SFPC:    "SFPC",
	SFASR:   "SFASR",
	SPX:     "SPX",
	SPM:     "SPM",
	SPKA:    "SPKA",
	SSAR:    "SSAR",
	SSAIR:   "SSAIR",
	SSKE:    "SSKE",
	SSM:     "SSM",
	SRP:     "SRP",
	SLDA:    "SLDA",
	SLDL:    "SLDL",
	SLA:     "SLA",
	SLAK:    "SLAK",
	SLAG:    "SLAG",
	SLL:     "SLL",
	SLLK:    "SLLK",
	SLLG:    "SLLG",
	SRDA:    "SRDA",
	SRDL:    "SRDL",
	SRA:     "SRA",
	SRAK:    "SRAK",
	SRAG:    "SRAG",
	SRL:     "SRL",
	SRLK:    "SRLK",
	SRLG:    "SRLG",
	SLXT:    "SLXT",
	SLDT:    "SLDT",
	SRXT:    "SRXT",
	SRDT:    "SRDT",
	SIGP:    "SIGP",
	SORTL:   "SORTL",
	SQXBR:   "SQXBR",
	SQXR:    "SQXR",
	SQDB:    "SQDB",
	SQDBR:   "SQDBR",
	SQD:     "SQD",
	SQDR:    "SQDR",
	SQEB:    "SQEB",
	SQEBR:   "SQEBR",
	SQE:     "SQE",
	SQER:    "SQER",
	SSCH:    "SSCH",
	ST:      "ST",
	STY:     "STY",
	STG:     "STG",
	STD:     "STD",
	STDY:    "STDY",
	STE:     "STE",
	STEY:    "STEY",
	STAM:    "STAM",
	STAMY:   "STAMY",
	STBEAR:  "STBEAR",
	STCPS:   "STCPS",
	STCRW:   "STCRW",
	STC:     "STC",
	STCY:    "STCY",
	STCH:    "STCH",
	STCMH:   "STCMH",
	STCM:    "STCM",
	STCMY:   "STCMY",
	STCK:    "STCK",
	STCKC:   "STCKC",
	STCKE:   "STCKE",
	STCKF:   "STCKF",
	STCTL:   "STCTL",
	STCTG:   "STCTG",
	STAP:    "STAP",
	STIDP:   "STIDP",
	STPT:    "STPT",
	STFL:    "STFL",
	STFLE:   "STFLE",
	STFPC:   "STFPC",
	STGSC:   "STGSC",
	STH:     "STH",
	STHY:    "STHY",
	STHH:    "STHH",
	STHRL:   "STHRL",
	STFH:    "STFH",
	STOCFH:  "STOCFH",
	STM:     "STM",
	STMY:    "STMY",
	STMG:    "STMG",
	STMH:    "STMH",
	STOC:    "STOC",
	STOCG:   "STOCG",
	STPQ:    "STPQ",
	STPX:    "STPX",
	STRAG:   "STRAG",
	STRL:    "STRL",
	STGRL:   "STGRL",
	STRVH:   "STRVH",
	STRV:    "STRV",
	STRVG:   "STRVG",
	STSCH:   "STSCH",
	STSI:    "STSI",
	STNSM:   "STNSM",
	STOSM:   "STOSM",
	STURA:   "STURA",
	STURG:   "STURG",
	S:       "S",
	SR:      "SR",
	SRK:     "SRK",
	SY:      "SY",
	SG:      "SG",
	SGR:     "SGR",
	SGRK:    "SGRK",
	SGF:     "SGF",
	SGFR:    "SGFR",
	SXBR:    "SXBR",
	SXTR:    "SXTR",
	SXTRA:   "SXTRA",
	SDB:     "SDB",
	SDBR:    "SDBR",
	SDTR:    "SDTR",
	SDTRA:   "SDTRA",
	SEB:     "SEB",
	SEBR:    "SEBR",
	SP:      "SP",
	SH:      "SH",
	SHY:     "SHY",
	SGH:     "SGH",
	SHHHR:   "SHHHR",
	SHHLR:   "SHHLR",
	SL:      "SL",
	SLR:     "SLR",
	SLRK:    "SLRK",
	SLY:     "SLY",
	SLG:     "SLG",
	SLGR:    "SLGR",
	SLGRK:   "SLGRK",
	SLGF:    "SLGF",
	SLGFR:   "SLGFR",
	SLHHHR:  "SLHHHR",
	SLHHLR:  "SLHHLR",
	SLFI:    "SLFI",
	SLGFI:   "SLGFI",
	SLB:     "SLB",
	SLBR:    "SLBR",
	SLBG:    "SLBG",
	SLBGR:   "SLBGR",
	SXR:     "SXR",
	SD:      "SD",
	SDR:     "SDR",
	SE:      "SE",
	SER:     "SER",
	SW:      "SW",
	SWR:     "SWR",
	SU:      "SU",
	SUR:     "SUR",
	SVC:     "SVC",
	TAR:     "TAR",
	TAM:     "TAM",
	TS:      "TS",
	TB:      "TB",
	TCXB:    "TCXB",
	TDCXT:   "TDCXT",
	TCDB:    "TCDB",
	TDCDT:   "TDCDT",
	TCEB:    "TCEB",
	TDCET:   "TDCET",
	TDGXT:   "TDGXT",
	TDGDT:   "TDGDT",
	TDGET:   "TDGET",
	TP:      "TP",
	TPEI:    "TPEI",
	TPI:     "TPI",
	TPROT:   "TPROT",
	TSCH:    "TSCH",
	TM:      "TM",
	TMY:     "TMY",
	TMHH:    "TMHH",
	TMHL:    "TMHL",
	TMLH:    "TMLH",
	TMLL:    "TMLL",
	TMH:     "TMH",
	TML:     "TML",
	TRACE:   "TRACE",
	TRACG:   "TRACG",
	TABORT:  "TABORT",
	TBEGINC: "TBEGINC",
	TBEGIN:  "TBEGIN",
	TEND:    "TEND",
	TR:      "TR",
	TRT:     "TRT",
	TRTE:    "TRTE",
	TRTR:    "TRTR",
	TRTRE:   "TRTRE",
	TRE:     "TRE",
	TROO:    "TROO",
	TROT:    "TROT",
	TRTO:    "TRTO",
	TRTT:    "TRTT",
	TRAP2:   "TRAP2",
	TRAP4:   "TRAP4",
	UNPK:    "UNPK",
	UNPKA:   "UNPKA",
	UNPKU:   "UNPKU",
	UPT:     "UPT",
	VA:      "VA",
	VACC:    "VACC",
	VAP:     "VAP",
	VAC:     "VAC",
	VACCC:   "VACCC",
	VN:      "VN",
	VNC:     "VNC",
	VAVG:    "VAVG",
	VAVGL:   "VAVGL",
	VBPERM:  "VBPERM",
	VCKSM:   "VCKSM",
	VCP:     "VCP",
	VCEQ:    "VCEQ",
	VCH:     "VCH",
	VCHL:    "VCHL",
	VCSPH:   "VCSPH",
	VCVB:    "VCVB",
	VCVBG:   "VCVBG",
	VCVD:    "VCVD",
	VCVDG:   "VCVDG",
	VCLZDP:  "VCLZDP",
	VCLZ:    "VCLZ",
	VCTZ:    "VCTZ",
	VDP:     "VDP",
	VEC:     "VEC",
	VECL:    "VECL",
	VERIM:   "VERIM",
	VERLL:   "VERLL",
	VERLLV:  "VERLLV",
	VESLV:   "VESLV",
	VESL:    "VESL",
	VESRA:   "VESRA",
	VESRAV:  "VESRAV",
	VESRL:   "VESRL",
	VESRLV:  "VESRLV",
	VX:      "VX",
	VFAE:    "VFAE",
	VFEE:    "VFEE",
	VFENE:   "VFENE",
	VFA:     "VFA",
	WFK:     "WFK",
	VFCE:    "VFCE",
	VFCH:    "VFCH",
	VFCHE:   "VFCHE",
	WFC:     "WFC",
	VCLFNH:  "VCLFNH",
	VCLFNL:  "VCLFNL",
	VCRNF:   "VCRNF",
	VCFPS:   "VCFPS",
	VCDG:    "VCDG",
	VCFPL:   "VCFPL",
	VCDLG:   "VCDLG",
	VCFN:    "VCFN",
	VCSFP:   "VCSFP",
	VCGD:    "VCGD",
	VCLFP:   "VCLFP",
	VCLGD:   "VCLGD",
	VCNF:    "VCNF",
	VFD:     "VFD",
	VFLL:    "VFLL",
	VFLR:    "VFLR",
	VFMAX:   "VFMAX",
	VFMIN:   "VFMIN",
	VFM:     "VFM",
	VFMA:    "VFMA",
	VFMS:    "VFMS",
	VFNMA:   "VFNMA",
	VFNMS:   "VFNMS",
	VFPSO:   "VFPSO",
	VFSQ:    "VFSQ",
	VFS:     "VFS",
	VFTCI:   "VFTCI",
	VGFM:    "VGFM",
	VGFMA:   "VGFMA",
	VGEF:    "VGEF",
	VGEG:    "VGEG",
	VGBM:    "VGBM",
	VGM:     "VGM",
	VISTR:   "VISTR",
	VL:      "VL",
	VLR:     "VLR",
	VLREP:   "VLREP",
	VLEBRH:  "VLEBRH",
	VLEBRF:  "VLEBRF",
	VLEBRG:  "VLEBRG",
	VLBRREP: "VLBRREP",
	VLLEBRZ: "VLLEBRZ",
	VLBR:    "VLBR",
	VLC:     "VLC",
	VLEH:    "VLEH",
	VLEF:    "VLEF",
	VLEG:    "VLEG",
	VLEB:    "VLEB",
	VLEIH:   "VLEIH",
	VLEIF:   "VLEIF",
	VLEIG:   "VLEIG",
	VLEIB:   "VLEIB",
	VLER:    "VLER",
	VFI:     "VFI",
	VLGV:    "VLGV",
	VLIP:    "VLIP",
	VLLEZ:   "VLLEZ",
	VLM:     "VLM",
	VLP:     "VLP",
	VLRL:    "VLRL",
	VLRLR:   "VLRLR",
	VLBB:    "VLBB",
	VLVG:    "VLVG",
	VLVGP:   "VLVGP",
	VLL:     "VLL",
	VMX:     "VMX",
	VMXL:    "VMXL",
	VMRH:    "VMRH",
	VMRL:    "VMRL",
	VMN:     "VMN",
	VMNL:    "VMNL",
	VMAE:    "VMAE",
	VMAH:    "VMAH",
	VMALE:   "VMALE",
	VMALH:   "VMALH",
	VMALO:   "VMALO",
	VMAL:    "VMAL",
	VMAO:    "VMAO",
	VMSP:    "VMSP",
	VMP:     "VMP",
	VME:     "VME",
	VMH:     "VMH",
	VMLE:    "VMLE",
	VMLH:    "VMLH",
	VMLO:    "VMLO",
	VML:     "VML",
	VMO:     "VMO",
	VMSL:    "VMSL",
	VNN:     "VNN",
	VNO:     "VNO",
	VNX:     "VNX",
	VO:      "VO",
	VOC:     "VOC",
	VPK:     "VPK",
	VPKLS:   "VPKLS",
	VPKS:    "VPKS",
	VPKZ:    "VPKZ",
	VPKZR:   "VPKZR",
	VPSOP:   "VPSOP",
	VPERM:   "VPERM",
	VPDI:    "VPDI",
	VPOPCT:  "VPOPCT",
	VRP:     "VRP",
	VREP:    "VREP",
	VREPI:   "VREPI",
	VSCEF:   "VSCEF",
	VSCEG:   "VSCEG",
	VSEL:    "VSEL",
	VSDP:    "VSDP",
	VSRP:    "VSRP",
	VSRPR:   "VSRPR",
	VSL:     "VSL",
	VSLB:    "VSLB",
	VSLD:    "VSLD",
	VSLDB:   "VSLDB",
	VSRA:    "VSRA",
	VSRAB:   "VSRAB",
	VSRD:    "VSRD",
	VSRL:    "VSRL",
	VSRLB:   "VSRLB",
	VSEG:    "VSEG",
	VST:     "VST",
	VSTEBRH: "VSTEBRH",
	VSTEBRF: "VSTEBRF",
	VSTEBRG: "VSTEBRG",
	VSTBR:   "VSTBR",
	VSTEH:   "VSTEH",
	VSTEF:   "VSTEF",
	VSTEG:   "VSTEG",
	VSTEB:   "VSTEB",
	VSTER:   "VSTER",
	VSTM:    "VSTM",
	VSTRL:   "VSTRL",
	VSTRLR:  "VSTRLR",
	VSTL:    "VSTL",
	VSTRC:   "VSTRC",
	VSTRS:   "VSTRS",
	VS:      "VS",
	VSCBI:   "VSCBI",
	VSP:     "VSP",
	VSBCBI:  "VSBCBI",
	VSBI:    "VSBI",
	VSUMG:   "VSUMG",
	VSUMQ:   "VSUMQ",
	VSUM:    "VSUM",
	VTP:     "VTP",
	VTM:     "VTM",
	VUPH:    "VUPH",
	VUPLH:   "VUPLH",
	VUPLL:   "VUPLL",
	VUPL:    "VUPL",
	VUPKZ:   "VUPKZ",
	VUPKZH:  "VUPKZH",
	VUPKZL:  "VUPKZL",
	ZAP:     "ZAP",
}

var (
	ap_Reg_8_11            = &argField{Type: TypeReg, flags: 0x1, BitField: BitField{8, 4}}
	ap_DispUnsigned_20_31  = &argField{Type: TypeDispUnsigned, flags: 0x10, BitField: BitField{20, 12}}
	ap_IndexReg_12_15      = &argField{Type: TypeIndexReg, flags: 0x41, BitField: BitField{12, 4}}
	ap_BaseReg_16_19       = &argField{Type: TypeBaseReg, flags: 0x21, BitField: BitField{16, 4}}
	ap_Reg_12_15           = &argField{Type: TypeReg, flags: 0x1, BitField: BitField{12, 4}}
	ap_Reg_24_27           = &argField{Type: TypeReg, flags: 0x1, BitField: BitField{24, 4}}
	ap_Reg_28_31           = &argField{Type: TypeReg, flags: 0x1, BitField: BitField{28, 4}}
	ap_Reg_16_19           = &argField{Type: TypeReg, flags: 0x1, BitField: BitField{16, 4}}
	ap_DispSigned20_20_39  = &argField{Type: TypeDispSigned20, flags: 0x10, BitField: BitField{20, 20}}
	ap_FPReg_24_27         = &argField{Type: TypeFPReg, flags: 0x2, BitField: BitField{24, 4}}
	ap_FPReg_28_31         = &argField{Type: TypeFPReg, flags: 0x2, BitField: BitField{28, 4}}
	ap_FPReg_16_19         = &argField{Type: TypeFPReg, flags: 0x2, BitField: BitField{16, 4}}
	ap_FPReg_8_11          = &argField{Type: TypeFPReg, flags: 0x2, BitField: BitField{8, 4}}
	ap_Mask_32_35          = &argField{Type: TypeMask, flags: 0x800, BitField: BitField{32, 4}}
	ap_Len_8_11            = &argField{Type: TypeLen, flags: 0x10, BitField: BitField{8, 4}}
	ap_DispUnsigned_36_47  = &argField{Type: TypeDispUnsigned, flags: 0x10, BitField: BitField{36, 12}}
	ap_Len_12_15           = &argField{Type: TypeLen, flags: 0x10, BitField: BitField{12, 4}}
	ap_BaseReg_32_35       = &argField{Type: TypeBaseReg, flags: 0x21, BitField: BitField{32, 4}}
	ap_ImmSigned16_16_31   = &argField{Type: TypeImmSigned16, flags: 0x0, BitField: BitField{16, 16}}
	ap_ImmSigned32_16_47   = &argField{Type: TypeImmSigned32, flags: 0x0, BitField: BitField{16, 32}}
	ap_ImmSigned8_8_15     = &argField{Type: TypeImmSigned8, flags: 0x0, BitField: BitField{8, 8}}
	ap_ImmUnsigned_16_47   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{16, 32}}
	ap_FPReg_12_15         = &argField{Type: TypeFPReg, flags: 0x2, BitField: BitField{12, 4}}
	ap_Len_8_15            = &argField{Type: TypeLen, flags: 0x10, BitField: BitField{8, 8}}
	ap_ImmUnsigned_8_15    = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{8, 8}}
	ap_ImmUnsigned_16_31   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{16, 16}}
	ap_Mask_8_11           = &argField{Type: TypeMask, flags: 0x800, BitField: BitField{8, 4}}
	ap_RegImSigned16_32_47 = &argField{Type: TypeRegImSigned16, flags: 0x80, BitField: BitField{32, 16}}
	ap_RegImSigned12_12_23 = &argField{Type: TypeRegImSigned12, flags: 0x80, BitField: BitField{12, 12}}
	ap_RegImSigned24_24_47 = &argField{Type: TypeRegImSigned24, flags: 0x80, BitField: BitField{24, 24}}
	ap_RegImSigned16_16_31 = &argField{Type: TypeRegImSigned16, flags: 0x80, BitField: BitField{16, 16}}
	ap_RegImSigned32_16_47 = &argField{Type: TypeRegImSigned32, flags: 0x80, BitField: BitField{16, 32}}
	ap_Mask_16_19          = &argField{Type: TypeMask, flags: 0x800, BitField: BitField{16, 4}}
	ap_ImmSigned16_32_47   = &argField{Type: TypeImmSigned16, flags: 0x0, BitField: BitField{32, 16}}
	ap_ImmSigned8_32_39    = &argField{Type: TypeImmSigned8, flags: 0x0, BitField: BitField{32, 8}}
	ap_Mask_12_15          = &argField{Type: TypeMask, flags: 0x800, BitField: BitField{12, 4}}
	ap_ImmUnsigned_32_47   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{32, 16}}
	ap_ImmUnsigned_32_39   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{32, 8}}
	ap_FPReg_32_35         = &argField{Type: TypeFPReg, flags: 0x2, BitField: BitField{32, 4}}
	ap_Mask_36_39          = &argField{Type: TypeMask, flags: 0x800, BitField: BitField{36, 4}}
	ap_Mask_20_23          = &argField{Type: TypeMask, flags: 0x800, BitField: BitField{20, 4}}
	ap_Reg_32_35           = &argField{Type: TypeReg, flags: 0x1, BitField: BitField{32, 4}}
	ap_VecReg_8_11         = &argField{Type: TypeVecReg, flags: 0x8, BitField: BitField{8, 4}}
	ap_VecReg_12_15        = &argField{Type: TypeVecReg, flags: 0x8, BitField: BitField{12, 4}}
	ap_VecReg_16_19        = &argField{Type: TypeVecReg, flags: 0x8, BitField: BitField{16, 4}}
	ap_Mask_24_27          = &argField{Type: TypeMask, flags: 0x800, BitField: BitField{24, 4}}
	ap_ImmUnsigned_36_39   = &argField{Type: TypeImmUnsigned, flags: 0xc00, BitField: BitField{36, 4}}
	ap_ImmUnsigned_24_27   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{24, 4}}
	ap_ImmUnsigned_28_31   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{28, 4}}
	ap_ImmUnsigned_16_23   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{16, 8}}
	ap_ImmUnsigned_24_31   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{24, 8}}
	ap_ImmUnsigned_12_15   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{12, 4}}
	ap_ImmUnsigned_28_35   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{28, 8}}
	ap_VecReg_32_35        = &argField{Type: TypeVecReg, flags: 0x8, BitField: BitField{32, 4}}
	ap_Mask_28_31          = &argField{Type: TypeMask, flags: 0x800, BitField: BitField{28, 4}}
	ap_ImmUnsigned_16_27   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{16, 12}}
	ap_ImmUnsigned_32_35   = &argField{Type: TypeImmUnsigned, flags: 0x0, BitField: BitField{32, 4}}
)

var instFormats = [...]instFormat{
	{A, 0xff00000000000000, 0x5a00000000000000, // ADD (32) (A R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AR, 0xff00000000000000, 0x1a00000000000000, // ADD (32) (AR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{ARK, 0xffff000000000000, 0xb9f8000000000000, // ADD (32) (ARK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{AY, 0xff00000000ff0000, 0xe3000000005a0000, // ADD (32) (AY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AG, 0xff00000000ff0000, 0xe300000000080000, // ADD (64) (AG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AGR, 0xffff000000000000, 0xb908000000000000, // ADD (64) (AGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{AGRK, 0xffff000000000000, 0xb9e8000000000000, // ADD (64) (AGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{AGF, 0xff00000000ff0000, 0xe300000000180000, // ADD (64←32) (AGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AGFR, 0xffff000000000000, 0xb918000000000000, // ADD (64←32) (AGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{AXBR, 0xffff000000000000, 0xb34a000000000000, // ADD (extended BFP) (AXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{AXTR, 0xffff000000000000, 0xb3da000000000000, // ADD (extended DFP) (AXTR R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{AXTRA, 0xffff000000000000, 0xb3da000000000000, // ADD (extended DFP) (AXTRA R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{ADB, 0xff00000000ff0000, 0xed000000001a0000, // ADD (long BFP) (ADB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{ADBR, 0xffff000000000000, 0xb31a000000000000, // ADD (long BFP) (ADBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{ADTR, 0xffff000000000000, 0xb3d2000000000000, // ADD (long DFP) (ADTR R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{ADTRA, 0xffff000000000000, 0xb3d2000000000000, // ADD (long DFP) (ADTRA R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{AEB, 0xff00000000ff0000, 0xed000000000a0000, // ADD (short BFP) (AEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{AEBR, 0xffff000000000000, 0xb30a000000000000, // ADD (short BFP) (AEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{AP, 0xff00000000000000, 0xfa00000000000000, // ADD DECIMAL (AP D1(L1,B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_12_15, ap_BaseReg_32_35}},
	{AH, 0xff00000000000000, 0x4a00000000000000, // ADD HALFWORD (32←16) (AH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AHY, 0xff00000000ff0000, 0xe3000000007a0000, // ADD HALFWORD (32←16) (AHY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AGH, 0xff00000000ff0000, 0xe300000000380000, // ADD HALFWORD (64→16) (AGH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AHI, 0xff0f000000000000, 0xa70a000000000000, // ADD HALFWORD IMMEDIATE (32←16) (AHI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned16_16_31}},
	{AGHI, 0xff0f000000000000, 0xa70b000000000000, // ADD HALFWORD IMMEDIATE (64←16) (AGHI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned16_16_31}},
	{AHHHR, 0xffff000000000000, 0xb9c8000000000000, // ADD HIGH (32) (AHHHR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{AHHLR, 0xffff000000000000, 0xb9d8000000000000, // ADD HIGH (32) (AHHLR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{AFI, 0xff0f000000000000, 0xc209000000000000, // ADD IMMEDIATE (32) (AFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned32_16_47}},
	{AHIK, 0xff00000000ff0000, 0xec00000000d80000, // ADD IMMEDIATE (32←16) (AHIK R1,R3,I2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmSigned16_16_31}},
	{ASI, 0xff00000000ff0000, 0xeb000000006a0000, // ADD IMMEDIATE (32←8) (ASI D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmSigned8_8_15}},
	{AGHIK, 0xff00000000ff0000, 0xec00000000d90000, // ADD IMMEDIATE (64←16) (AGHIK R1,R3,I2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmSigned16_16_31}},
	{AGFI, 0xff0f000000000000, 0xc208000000000000, // ADD IMMEDIATE (64←32) (AGFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned32_16_47}},
	{AGSI, 0xff00000000ff0000, 0xeb000000007a0000, // ADD IMMEDIATE (64←8) (AGSI D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmSigned8_8_15}},
	{AIH, 0xff0f000000000000, 0xcc08000000000000, // ADD IMMEDIATE HIGH (32) (AIH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned32_16_47}},
	{AL, 0xff00000000000000, 0x5e00000000000000, // ADD LOGICAL (32) (AL R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{ALR, 0xff00000000000000, 0x1e00000000000000, // ADD LOGICAL (32) (ALR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{ALRK, 0xffff000000000000, 0xb9fa000000000000, // ADD LOGICAL (32) (ALRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{ALY, 0xff00000000ff0000, 0xe3000000005e0000, // ADD LOGICAL (32) (ALY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{ALG, 0xff00000000ff0000, 0xe3000000000a0000, // ADD LOGICAL (64) (ALG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{ALGR, 0xffff000000000000, 0xb90a000000000000, // ADD LOGICAL (64) (ALGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ALGRK, 0xffff000000000000, 0xb9ea000000000000, // ADD LOGICAL (64) (ALGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{ALGF, 0xff00000000ff0000, 0xe3000000001a0000, // ADD LOGICAL (64←32) (ALGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{ALGFR, 0xffff000000000000, 0xb91a000000000000, // ADD LOGICAL (64←32) (ALGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ALHHHR, 0xffff000000000000, 0xb9ca000000000000, // ADD LOGICAL HIGH (32) (ALHHHR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{ALHHLR, 0xffff000000000000, 0xb9da000000000000, // ADD LOGICAL HIGH (32) (ALHHLR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{ALFI, 0xff0f000000000000, 0xc20b000000000000, // ADD LOGICAL IMMEDIATE (32) (ALFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{ALGFI, 0xff0f000000000000, 0xc20a000000000000, // ADD LOGICAL IMMEDIATE (64←32) (ALGFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{ALC, 0xff00000000ff0000, 0xe300000000980000, // ADD LOGICAL WITH CARRY (32) (ALC R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{ALCR, 0xffff000000000000, 0xb998000000000000, // ADD LOGICAL WITH CARRY (32) (ALCR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ALCG, 0xff00000000ff0000, 0xe300000000880000, // ADD LOGICAL WITH CARRY (64) (ALCG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{ALCGR, 0xffff000000000000, 0xb988000000000000, // ADD LOGICAL WITH CARRY (64) (ALCGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ALHSIK, 0xff00000000ff0000, 0xec00000000da0000, // ADD LOGICAL WITH SIGNED IMMEDIATE(32→16) (ALHSIK R1,R3,I2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmSigned16_16_31}},
	{ALSI, 0xff00000000ff0000, 0xeb000000006e0000, // ADD LOGICAL WITH SIGNED IMMEDIATE (32←8) (ALSI D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmSigned8_8_15}},
	{ALGHSIK, 0xff00000000ff0000, 0xec00000000db0000, // ADD LOGICAL WITH SIGNED IMMEDIATE(64→16) (ALGHSIK R1,R3,I2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmSigned16_16_31}},
	{ALGSI, 0xff00000000ff0000, 0xeb000000007e0000, // ADD LOGICAL WITH SIGNED IMMEDIATE (64→8) (ALGSI D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmSigned8_8_15}},
	{ALSIH, 0xff0f000000000000, 0xcc0a000000000000, // ADD LOGICAL WITH SIGNED IMMEDIATE HIGH(32) (ALSIH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{ALSIHN, 0xff0f000000000000, 0xcc0b000000000000, // ADD LOGICAL WITH SIGNED IMMEDIATE HIGH(32) (ALSIHN R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{AXR, 0xff00000000000000, 0x3600000000000000, // ADD NORMALIZED (extended HFP) (AXR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{AD, 0xff00000000000000, 0x6a00000000000000, // ADD NORMALIZED (long HFP) (AD R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{ADR, 0xff00000000000000, 0x2a00000000000000, // ADD NORMALIZED (long HFP) (ADR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{AE, 0xff00000000000000, 0x7a00000000000000, // ADD NORMALIZED (short HFP) (AE R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AER, 0xff00000000000000, 0x3a00000000000000, // ADD NORMALIZED (short HFP) (AER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{AW, 0xff00000000000000, 0x6e00000000000000, // ADD UNNORMALIZED (long HFP) (AW R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AWR, 0xff00000000000000, 0x2e00000000000000, // ADD UNNORMALIZED (long HFP) (AWR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{AU, 0xff00000000000000, 0x7e00000000000000, // ADD UNNORMALIZED (short HFP) (AU R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{AUR, 0xff00000000000000, 0x3e00000000000000, // ADD UNNORMALIZED (short HFP) (AUR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{N, 0xff00000000000000, 0x5400000000000000, // AND (32) (N R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{NR, 0xff00000000000000, 0x1400000000000000, // AND (32) (NR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{NRK, 0xffff000000000000, 0xb9f4000000000000, // AND (32) (NRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{NY, 0xff00000000ff0000, 0xe300000000540000, // AND (32) (NY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{NG, 0xff00000000ff0000, 0xe300000000800000, // AND (64) (NG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{NGR, 0xffff000000000000, 0xb980000000000000, // AND (64) (NGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{NGRK, 0xffff000000000000, 0xb9e4000000000000, // AND (64) (NGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{NC, 0xff00000000000000, 0xd400000000000000, // AND (character) (NC D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{NI, 0xff00000000000000, 0x9400000000000000, // AND (immediate) (NI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{NIY, 0xff00000000ff0000, 0xeb00000000540000, // AND (immediate) (NIY D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{NIHH, 0xff0f000000000000, 0xa504000000000000, // AND IMMEDIATE (high high) (NIHH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{NIHL, 0xff0f000000000000, 0xa505000000000000, // AND IMMEDIATE (high low) (NIHL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{NIHF, 0xff0f000000000000, 0xc00a000000000000, // AND IMMEDIATE (high) (NIHF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{NILH, 0xff0f000000000000, 0xa506000000000000, // AND IMMEDIATE (low high) (NILH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{NILL, 0xff0f000000000000, 0xa507000000000000, // AND IMMEDIATE (low low) (NILL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{NILF, 0xff0f000000000000, 0xc00b000000000000, // AND IMMEDIATE (low) (NILF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{NCRK, 0xffff000000000000, 0xb9f5000000000000, // AND WITH COMPLEMENT(32) (NCRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{NCGRK, 0xffff000000000000, 0xb9e5000000000000, // AND WITH COMPLEMENT(64) (NCGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{BAL, 0xff00000000000000, 0x4500000000000000, // BRANCH AND LINK (BAL R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{BALR, 0xff00000000000000, 0x500000000000000, // BRANCH AND LINK (BALR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{BAS, 0xff00000000000000, 0x4d00000000000000, // BRANCH AND SAVE (BAS R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{BASR, 0xff00000000000000, 0xd00000000000000, // BRANCH AND SAVE (BASR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{BASSM, 0xff00000000000000, 0xc00000000000000, // BRANCH AND SAVE AND SET MODE (BASSM R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{BSA, 0xffff000000000000, 0xb25a000000000000, // BRANCH AND SET AUTHORITY (BSA R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{BSM, 0xff00000000000000, 0xb00000000000000, // BRANCH AND SET MODE (BSM R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{BAKR, 0xffff000000000000, 0xb240000000000000, // BRANCH AND STACK (BAKR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{BSG, 0xffff000000000000, 0xb258000000000000, // BRANCH IN SUBSPACE GROUP (BSG R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{BIC, 0xff00000000ff0000, 0xe300000000470000, // BRANCH INDIRECT ON CONDITION (BIC M1,D2(X2,B2))
		[7]*argField{ap_Mask_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{BC, 0xff00000000000000, 0x4700000000000000, // BRANCH ON CONDITION (BC M1,D2(X2,B2))
		[7]*argField{ap_Mask_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{BCR, 0xff00000000000000, 0x700000000000000, // BRANCH ON CONDITION (BCR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{BCT, 0xff00000000000000, 0x4600000000000000, // BRANCH ON COUNT (32) (BCT R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{BCTR, 0xff00000000000000, 0x600000000000000, // BRANCH ON COUNT (32) (BCTR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{BCTG, 0xff00000000ff0000, 0xe300000000460000, // BRANCH ON COUNT (64) (BCTG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{BCTGR, 0xffff000000000000, 0xb946000000000000, // BRANCH ON COUNT (64) (BCTGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{BXH, 0xff00000000000000, 0x8600000000000000, // BRANCH ON INDEX HIGH (32) (BXH R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{BXHG, 0xff00000000ff0000, 0xeb00000000440000, // BRANCH ON INDEX HIGH (64) (BXHG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{BXLE, 0xff00000000000000, 0x8700000000000000, // BRANCH ON INDEX LOW OR EQUAL (32) (BXLE R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{BXLEG, 0xff00000000ff0000, 0xeb00000000450000, // BRANCH ON INDEX LOW OR EQUAL (64) (BXLEG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{BPP, 0xff00000000000000, 0xc700000000000000, // BRANCH PREDICTION PRELOAD (BPP M1,RI2,D3(B3))
		[7]*argField{ap_Mask_8_11, ap_RegImSigned16_32_47, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{BPRP, 0xff00000000000000, 0xc500000000000000, // BRANCH PREDICTION RELATIVE PRELOAD (BPRP M1,RI2,RI3)
		[7]*argField{ap_Mask_8_11, ap_RegImSigned12_12_23, ap_RegImSigned24_24_47}},
	{BRAS, 0xff0f000000000000, 0xa705000000000000, // BRANCH RELATIVE AND SAVE (BRAS R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned16_16_31}},
	{BRASL, 0xff0f000000000000, 0xc005000000000000, // BRANCH RELATIVE AND SAVE LONG (BRASL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{BRC, 0xff0f000000000000, 0xa704000000000000, // BRANCH RELATIVE ON CONDITION (BRC M1,RI2)
		[7]*argField{ap_Mask_8_11, ap_RegImSigned16_16_31}},
	{BRCL, 0xff0f000000000000, 0xc004000000000000, // BRANCH RELATIVE ON CONDITION LONG (BRCL M1,RI2)
		[7]*argField{ap_Mask_8_11, ap_RegImSigned32_16_47}},
	{BRCT, 0xff0f000000000000, 0xa706000000000000, // BRANCH RELATIVE ON COUNT (32) (BRCT R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned16_16_31}},
	{BRCTG, 0xff0f000000000000, 0xa707000000000000, // BRANCH RELATIVE ON COUNT (64) (BRCTG R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned16_16_31}},
	{BRCTH, 0xff0f000000000000, 0xcc06000000000000, // BRANCH RELATIVE ON COUNT HIGH (32) (BRCTH R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{BRXH, 0xff00000000000000, 0x8400000000000000, // BRANCH RELATIVE ON INDEX HIGH (32) (BRXH R1,R3,RI2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_RegImSigned16_16_31}},
	{BRXHG, 0xff00000000ff0000, 0xec00000000440000, // BRANCH RELATIVE ON INDEX HIGH (64) (BRXHG R1,R3,RI2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_RegImSigned16_16_31}},
	{BRXLE, 0xff00000000000000, 0x8500000000000000, // BRANCH RELATIVE ON INDEX LOW OR EQ. (32) (BRXLE R1,R3,RI2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_RegImSigned16_16_31}},
	{BRXLG, 0xff00000000ff0000, 0xec00000000450000, // BRANCH RELATIVE ON INDEX LOW OR EQ. (64) (BRXLG R1,R3,RI2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_RegImSigned16_16_31}},
	{XSCH, 0xffff000000000000, 0xb276000000000000, // CANCEL SUBCHANNEL (XSCH)
		[7]*argField{}},
	{CKSM, 0xffff000000000000, 0xb241000000000000, // CHECKSUM (CKSM R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{KM, 0xffff000000000000, 0xb92e000000000000, // CIPHER MESSAGE (KM R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{KMA, 0xffff000000000000, 0xb929000000000000, // CIPHER MESSAGE WITH AUTHENTICATION (KMA R1,R3,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_16_19, ap_Reg_28_31}},
	{KMC, 0xffff000000000000, 0xb92f000000000000, // CIPHER MESSAGE WITH CHAINING (KMC R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{KMF, 0xffff000000000000, 0xb92a000000000000, // CIPHER MESSAGE WITH CIPHER FEEDBACK (KMF R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{KMCTR, 0xffff000000000000, 0xb92d000000000000, // CIPHER MESSAGE WITH COUNTER (KMCTR R1,R3,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_16_19, ap_Reg_28_31}},
	{KMO, 0xffff000000000000, 0xb92b000000000000, // CIPHER MESSAGE WITH OUTPUT FEEDBACK (KMO R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CSCH, 0xffff000000000000, 0xb230000000000000, // CLEAR SUBCHANNEL (CSCH)
		[7]*argField{}},
	{C, 0xff00000000000000, 0x5900000000000000, // COMPARE (32) (C R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CR, 0xff00000000000000, 0x1900000000000000, // COMPARE (32) (CR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{CY, 0xff00000000ff0000, 0xe300000000590000, // COMPARE (32) (CY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CG, 0xff00000000ff0000, 0xe300000000200000, // COMPARE (64) (CG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CGR, 0xffff000000000000, 0xb920000000000000, // COMPARE (64) (CGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CGF, 0xff00000000ff0000, 0xe300000000300000, // COMPARE (64←32) (CGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CGFR, 0xffff000000000000, 0xb930000000000000, // COMPARE (64←32) (CGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CXBR, 0xffff000000000000, 0xb349000000000000, // COMPARE (extended BFP) (CXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CXTR, 0xffff000000000000, 0xb3ec000000000000, // COMPARE (extended DFP) (CXTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CXR, 0xffff000000000000, 0xb369000000000000, // COMPARE (extended HFP) (CXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CDB, 0xff00000000ff0000, 0xed00000000190000, // COMPARE (long BFP) (CDB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{CDBR, 0xffff000000000000, 0xb319000000000000, // COMPARE (long BFP) (CDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CDTR, 0xffff000000000000, 0xb3e4000000000000, // COMPARE (long DFP) (CDTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CD, 0xff00000000000000, 0x6900000000000000, // COMPARE (long HFP) (CD R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CDR, 0xff00000000000000, 0x2900000000000000, // COMPARE (long HFP) (CDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{CEB, 0xff00000000ff0000, 0xed00000000090000, // COMPARE (short BFP) (CEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{CEBR, 0xffff000000000000, 0xb309000000000000, // COMPARE (short BFP) (CEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CE, 0xff00000000000000, 0x7900000000000000, // COMPARE (short HFP) (CE R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CER, 0xff00000000000000, 0x3900000000000000, // COMPARE (short HFP) (CER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{CRB, 0xff00000000ff0000, 0xec00000000f60000, // COMPARE AND BRANCH (32) (CRB R1,R2,M3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_Mask_32_35, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CGRB, 0xff00000000ff0000, 0xec00000000e40000, // COMPARE AND BRANCH (64) (CGRB R1,R2,M3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_Mask_32_35, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CRJ, 0xff00000000ff0000, 0xec00000000760000, // COMPARE AND BRANCH RELATIVE (32) (CRJ R1,R2,M3,RI4)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_Mask_32_35, ap_RegImSigned16_16_31}},
	{CGRJ, 0xff00000000ff0000, 0xec00000000640000, // COMPARE AND BRANCH RELATIVE (64) (CGRJ R1,R2,M3,RI4)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_Mask_32_35, ap_RegImSigned16_16_31}},
	{CFC, 0xffff000000000000, 0xb21a000000000000, // COMPARE AND FORM CODEWORD (CFC D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CRDTE, 0xffff000000000000, 0xb98f000000000000, // COMPARE AND REPLACE DAT TABLE ENTRY (CRDTE R1,R3,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_16_19, ap_Reg_28_31}},
	{KXBR, 0xffff000000000000, 0xb348000000000000, // COMPARE AND SIGNAL (extended BFP) (KXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{KXTR, 0xffff000000000000, 0xb3e8000000000000, // COMPARE AND SIGNAL (extended DFP) (KXTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{KDB, 0xff00000000ff0000, 0xed00000000180000, // COMPARE AND SIGNAL (long BFP) (KDB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{KDBR, 0xffff000000000000, 0xb318000000000000, // COMPARE AND SIGNAL (long BFP) (KDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{KDTR, 0xffff000000000000, 0xb3e0000000000000, // COMPARE AND SIGNAL (long DFP) (KDTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{KEB, 0xff00000000ff0000, 0xed00000000080000, // COMPARE AND SIGNAL (short BFP) (KEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{KEBR, 0xffff000000000000, 0xb308000000000000, // COMPARE AND SIGNAL (short BFP) (KEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CS, 0xff00000000000000, 0xba00000000000000, // COMPARE AND SWAP (32) (CS R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CSY, 0xff00000000ff0000, 0xeb00000000140000, // COMPARE AND SWAP (32) (CSY R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{CSG, 0xff00000000ff0000, 0xeb00000000300000, // COMPARE AND SWAP (64) (CSG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{CSP, 0xffff000000000000, 0xb250000000000000, // COMPARE AND SWAP AND PURGE (32) (CSP R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CSPG, 0xffff000000000000, 0xb98a000000000000, // COMPARE AND SWAP AND PURGE (64) (CSPG R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CSST, 0xff0f000000000000, 0xc802000000000000, // COMPARE AND SWAP AND STORE (CSST D1(B1),D2(B2),R3)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35, ap_Reg_8_11}},
	{CRT, 0xffff000000000000, 0xb972000000000000, // COMPARE AND TRAP (32) (CRT R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CGRT, 0xffff000000000000, 0xb960000000000000, // COMPARE AND TRAP (64) (CGRT R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CEXTR, 0xffff000000000000, 0xb3fc000000000000, // COMPARE BIASED EXPONENT (extended DFP) (CEXTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CEDTR, 0xffff000000000000, 0xb3f4000000000000, // COMPARE BIASED EXPONENT (long DFP) (CEDTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CP, 0xff00000000000000, 0xf900000000000000, // COMPARE DECIMAL (CP D1(L1,B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_12_15, ap_BaseReg_32_35}},
	{CDS, 0xff00000000000000, 0xbb00000000000000, // COMPARE DOUBLE AND SWAP (32) (CDS R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CDSY, 0xff00000000ff0000, 0xeb00000000310000, // COMPARE DOUBLE AND SWAP (32) (CDSY R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{CDSG, 0xff00000000ff0000, 0xeb000000003e0000, // COMPARE DOUBLE AND SWAP (64) (CDSG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{CH, 0xff00000000000000, 0x4900000000000000, // COMPARE HALFWORD (32→16) (CH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CHY, 0xff00000000ff0000, 0xe300000000790000, // COMPARE HALFWORD (32→16) (CHY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CGH, 0xff00000000ff0000, 0xe300000000340000, // COMPARE HALFWORD (64←16) (CGH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CHHSI, 0xffff000000000000, 0xe554000000000000, // COMPARE HALFWORD IMMEDIATE (16→16) (CHHSI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmSigned16_32_47}},
	{CHI, 0xff0f000000000000, 0xa70e000000000000, // COMPARE HALFWORD IMMEDIATE (32←16) (CHI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned16_16_31}},
	{CHSI, 0xffff000000000000, 0xe55c000000000000, // COMPARE HALFWORD IMMEDIATE (32←16) (CHSI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmSigned16_32_47}},
	{CGHI, 0xff0f000000000000, 0xa70f000000000000, // COMPARE HALFWORD IMMEDIATE (64←16) (CGHI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned16_16_31}},
	{CGHSI, 0xffff000000000000, 0xe558000000000000, // COMPARE HALFWORD IMMEDIATE (64←16) (CGHSI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmSigned16_32_47}},
	{CHRL, 0xff0f000000000000, 0xc605000000000000, // COMPAREHALFWORDRELATIVE LONG (32→16) (CHRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CGHRL, 0xff0f000000000000, 0xc604000000000000, // COMPAREHALFWORDRELATIVE LONG (64←16) (CGHRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CHF, 0xff00000000ff0000, 0xe300000000cd0000, // COMPARE HIGH (32) (CHF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CHHR, 0xffff000000000000, 0xb9cd000000000000, // COMPARE HIGH (32) (CHHR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CHLR, 0xffff000000000000, 0xb9dd000000000000, // COMPARE HIGH (32) (CHLR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CFI, 0xff0f000000000000, 0xc20d000000000000, // COMPARE IMMEDIATE (32) (CFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned32_16_47}},
	{CGFI, 0xff0f000000000000, 0xc20c000000000000, // COMPARE IMMEDIATE (64←32) (CGFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned32_16_47}},
	{CIB, 0xff00000000ff0000, 0xec00000000fe0000, // COMPARE IMMEDIATE AND BRANCH (32←8) (CIB R1,I2,M3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_ImmSigned8_32_39, ap_Mask_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CGIB, 0xff00000000ff0000, 0xec00000000fc0000, // COMPARE IMMEDIATE AND BRANCH (64←8) (CGIB R1,I2,M3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_ImmSigned8_32_39, ap_Mask_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CIJ, 0xff00000000ff0000, 0xec000000007e0000, // COMPARE IMMEDIATE AND BRANCH RELATIVE(32→8) (CIJ R1,I2,M3,RI4)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned8_32_39, ap_Mask_12_15, ap_RegImSigned16_16_31}},
	{CGIJ, 0xff00000000ff0000, 0xec000000007c0000, // COMPARE IMMEDIATE AND BRANCH RELATIVE(64→8) (CGIJ R1,I2,M3,RI4)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned8_32_39, ap_Mask_12_15, ap_RegImSigned16_16_31}},
	{CIT, 0xff00000000ff0000, 0xec00000000720000, // COMPARE IMMEDIATE AND TRAP (32→16) (CIT R1,I2,M3)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned16_16_31, ap_Mask_32_35}},
	{CGIT, 0xff00000000ff0000, 0xec00000000700000, // COMPARE IMMEDIATE AND TRAP (64←16) (CGIT R1,I2,M3)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned16_16_31, ap_Mask_32_35}},
	{CIH, 0xff0f000000000000, 0xcc0d000000000000, // COMPARE IMMEDIATE HIGH (32) (CIH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned32_16_47}},
	{CL, 0xff00000000000000, 0x5500000000000000, // COMPARE LOGICAL (32) (CL R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CLR, 0xff00000000000000, 0x1500000000000000, // COMPARE LOGICAL (32) (CLR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{CLY, 0xff00000000ff0000, 0xe300000000550000, // COMPARE LOGICAL (32) (CLY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CLG, 0xff00000000ff0000, 0xe300000000210000, // COMPARE LOGICAL (64) (CLG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CLGR, 0xffff000000000000, 0xb921000000000000, // COMPARE LOGICAL (64) (CLGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CLGF, 0xff00000000ff0000, 0xe300000000310000, // COMPARE LOGICAL (64→32) (CLGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CLGFR, 0xffff000000000000, 0xb931000000000000, // COMPARE LOGICAL (64→32) (CLGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CLC, 0xff00000000000000, 0xd500000000000000, // COMPARE LOGICAL (character) (CLC D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{CLI, 0xff00000000000000, 0x9500000000000000, // COMPARE LOGICAL (immediate) (CLI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{CLIY, 0xff00000000ff0000, 0xeb00000000550000, // COMPARE LOGICAL (immediate) (CLIY D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{CLRB, 0xff00000000ff0000, 0xec00000000f70000, // COMPARE LOGICAL AND BRANCH (32) (CLRB R1,R2,M3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_Mask_32_35, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CLGRB, 0xff00000000ff0000, 0xec00000000e50000, // COMPARE LOGICAL AND BRANCH (64) (CLGRB R1,R2,M3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_Mask_32_35, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CLRJ, 0xff00000000ff0000, 0xec00000000770000, // COMPARE LOGICAL AND BRANCH RELATIVE(32) (CLRJ R1,R2,M3,RI4)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_Mask_32_35, ap_RegImSigned16_16_31}},
	{CLGRJ, 0xff00000000ff0000, 0xec00000000650000, // COMPARE LOGICAL AND BRANCH RELATIVE(64) (CLGRJ R1,R2,M3,RI4)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_Mask_32_35, ap_RegImSigned16_16_31}},
	{CLRT, 0xffff000000000000, 0xb973000000000000, // COMPARE LOGICAL AND TRAP (32) (CLRT R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CLT, 0xff00000000ff0000, 0xeb00000000230000, // COMPARE LOGICAL AND TRAP (32) (CLT R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{CLGRT, 0xffff000000000000, 0xb961000000000000, // COMPARE LOGICAL AND TRAP (64) (CLGRT R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CLGT, 0xff00000000ff0000, 0xeb000000002b0000, // COMPARE LOGICAL AND TRAP (64) (CLGT R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{CLMH, 0xff00000000ff0000, 0xeb00000000200000, // COMPARE LOGICAL CHAR. UNDER MASK (high) (CLMH R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{CLM, 0xff00000000000000, 0xbd00000000000000, // COMPARE LOGICAL CHAR. UNDER MASK (low) (CLM R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CLMY, 0xff00000000ff0000, 0xeb00000000210000, // COMPARE LOGICAL CHAR. UNDER MASK (low) (CLMY R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{CLHF, 0xff00000000ff0000, 0xe300000000cf0000, // COMPARE LOGICAL HIGH (32) (CLHF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CLHHR, 0xffff000000000000, 0xb9cf000000000000, // COMPARE LOGICAL HIGH (32) (CLHHR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CLHLR, 0xffff000000000000, 0xb9df000000000000, // COMPARE LOGICAL HIGH (32) (CLHLR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CLHHSI, 0xffff000000000000, 0xe555000000000000, // COMPARE LOGICAL IMMEDIATE (16←16) (CLHHSI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_32_47}},
	{CLFI, 0xff0f000000000000, 0xc20f000000000000, // COMPARE LOGICAL IMMEDIATE (32) (CLFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{CLFHSI, 0xffff000000000000, 0xe55d000000000000, // COMPARE LOGICAL IMMEDIATE (32←16) (CLFHSI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_32_47}},
	{CLGHSI, 0xffff000000000000, 0xe559000000000000, // COMPARE LOGICAL IMMEDIATE (64←16) (CLGHSI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_32_47}},
	{CLGFI, 0xff0f000000000000, 0xc20e000000000000, // COMPARE LOGICAL IMMEDIATE (64←32) (CLGFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{CLIB, 0xff00000000ff0000, 0xec00000000ff0000, // COMPARE LOGICAL IMMEDIATE AND BRANCH(32←8) (CLIB R1,I2,M3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_32_39, ap_Mask_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CLGIB, 0xff00000000ff0000, 0xec00000000fd0000, // COMPARE LOGICAL IMMEDIATE AND BRANCH(64→8) (CLGIB R1,I2,M3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_32_39, ap_Mask_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CLIJ, 0xff00000000ff0000, 0xec000000007f0000, // COMPARE LOGICAL IMMEDIATE AND BRANCH (CLIJ R1,I2,M3,RI4)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_32_39, ap_Mask_12_15, ap_RegImSigned16_16_31}},
	{CLGIJ, 0xff00000000ff0000, 0xec000000007d0000, // RELATIVE (32→8)10COMPARE LOGICAL IMMEDIATE AND BRANCH (CLGIJ R1,I2,M3,RI4)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_32_39, ap_Mask_12_15, ap_RegImSigned16_16_31}},
	{CLFIT, 0xff00000000ff0000, 0xec00000000730000, // RELATIVE (64→8)COMPARE LOGICAL IMMEDIATE AND TRAP(32→16) (CLFIT R1,I2,M3)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31, ap_Mask_32_35}},
	{CLGIT, 0xff00000000ff0000, 0xec00000000710000, // COMPARE LOGICAL IMMEDIATE AND TRAP(64←16) (CLGIT R1,I2,M3)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31, ap_Mask_32_35}},
	{CLIH, 0xff0f000000000000, 0xcc0f000000000000, // COMPARE LOGICAL IMMEDIATE HIGH (32) (CLIH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{CLCL, 0xff00000000000000, 0xf00000000000000, // COMPARE LOGICAL LONG (CLCL R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{CLCLE, 0xff00000000000000, 0xa900000000000000, // COMPARE LOGICAL LONG EXTENDED (CLCLE R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{CLCLU, 0xff00000000ff0000, 0xeb000000008f0000, // COMPARE LOGICAL LONG UNICODE (CLCLU R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{CLRL, 0xff0f000000000000, 0xc60f000000000000, // COMPARE LOGICAL RELATIVE LONG (32) (CLRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CLHRL, 0xff0f000000000000, 0xc607000000000000, // COMPARE LOGICAL RELATIVE LONG (32→16) (CLHRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CLGRL, 0xff0f000000000000, 0xc60a000000000000, // COMPARE LOGICAL RELATIVE LONG (64) (CLGRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CLGHRL, 0xff0f000000000000, 0xc606000000000000, // COMPARE LOGICAL RELATIVE LONG (64→16) (CLGHRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CLGFRL, 0xff0f000000000000, 0xc60e000000000000, // COMPARE LOGICAL RELATIVE LONG (64→32) (CLGFRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CLST, 0xffff000000000000, 0xb25d000000000000, // COMPARE LOGICAL STRING (CLST R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CRL, 0xff0f000000000000, 0xc60d000000000000, // COMPARE RELATIVE LONG (32) (CRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CGRL, 0xff0f000000000000, 0xc608000000000000, // COMPARE RELATIVE LONG (64) (CGRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CGFRL, 0xff0f000000000000, 0xc60c000000000000, // COMPARE RELATIVE LONG (64←32) (CGFRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{CUSE, 0xffff000000000000, 0xb257000000000000, // COMPARE UNTIL SUBSTRING EQUAL (CUSE R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CMPSC, 0xffff000000000000, 0xb263000000000000, // COMPRESSION CALL (CMPSC R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{KDSA, 0xffff000000000000, 0xb93a000000000000, // COMPUTE DIGITAL SIGNATURE AUTHENTICATION (KDSA R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{KIMD, 0xffff000000000000, 0xb93e000000000000, // COMPUTE INTERMEDIATE MESSAGE DIGEST (KIMD R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{KLMD, 0xffff000000000000, 0xb93f000000000000, // COMPUTE LAST MESSAGE DIGEST (KLMD R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{KMAC, 0xffff000000000000, 0xb91e000000000000, // COMPUTE MESSAGE AUTHENTICATION CODE (KMAC R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{THDR, 0xffff000000000000, 0xb359000000000000, // CONVERT BFP TO HFP (long) (THDR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{THDER, 0xffff000000000000, 0xb358000000000000, // CONVERT BFP TO HFP (short to long) (THDER R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CXFBR, 0xffff000000000000, 0xb396000000000000, // CONVERT FROM FIXED (32 to extended BFP) (CXFBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CXFBRA, 0xffff000000000000, 0xb396000000000000, // CONVERT FROM FIXED (32 to extended BFP) (CXFBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CXFTR, 0xffff000000000000, 0xb959000000000000, // CONVERT FROM FIXED (32 to extended DFP) (CXFTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CXFR, 0xffff000000000000, 0xb3b6000000000000, // CONVERT FROM FIXED (32 to extended HFP) (CXFR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CDFBR, 0xffff000000000000, 0xb395000000000000, // CONVERT FROM FIXED (32 to long BFP) (CDFBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CDFBRA, 0xffff000000000000, 0xb395000000000000, // CONVERT FROM FIXED (32 to long BFP) (CDFBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CDFTR, 0xffff000000000000, 0xb951000000000000, // CONVERT FROM FIXED (32 to long DFP) (CDFTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CDFR, 0xffff000000000000, 0xb3b5000000000000, // CONVERT FROM FIXED (32 to long HFP) (CDFR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CEFBR, 0xffff000000000000, 0xb394000000000000, // CONVERT FROM FIXED (32 to short BFP) (CEFBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CEFBRA, 0xffff000000000000, 0xb394000000000000, // CONVERT FROM FIXED (32 to short BFP) (CEFBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CEFR, 0xffff000000000000, 0xb3b4000000000000, // CONVERT FROM FIXED (32 to short HFP) (CEFR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CXGBR, 0xffff000000000000, 0xb3a6000000000000, // CONVERT FROM FIXED (64 to extended BFP) (CXGBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CXGBRA, 0xffff000000000000, 0xb3a6000000000000, // CONVERT FROM FIXED (64 to extended BFP) (CXGBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CXGTR, 0xffff000000000000, 0xb3f9000000000000, // CONVERT FROM FIXED (64 to extended DFP) (CXGTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CXGTRA, 0xffff000000000000, 0xb3f9000000000000, // CONVERT FROM FIXED (64 to extended DFP) (CXGTRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CXGR, 0xffff000000000000, 0xb3c6000000000000, // CONVERT FROM FIXED (64 to extended HFP) (CXGR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CDGBR, 0xffff000000000000, 0xb3a5000000000000, // CONVERT FROM FIXED (64 to long BFP) (CDGBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CDGBRA, 0xffff000000000000, 0xb3a5000000000000, // CONVERT FROM FIXED (64 to long BFP) (CDGBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CDGTR, 0xffff000000000000, 0xb3f1000000000000, // CONVERT FROM FIXED (64 to long DFP) (CDGTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CDGTRA, 0xffff000000000000, 0xb3f1000000000000, // CONVERT FROM FIXED (64 to long DFP) (CDGTRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CDGR, 0xffff000000000000, 0xb3c5000000000000, // CONVERT FROM FIXED (64 to long HFP) (CDGR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CEGBR, 0xffff000000000000, 0xb3a4000000000000, // CONVERT FROM FIXED (64 to short BFP) (CEGBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CEGBRA, 0xffff000000000000, 0xb3a4000000000000, // CONVERT FROM FIXED (64 to short BFP) (CEGBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_Reg_28_31}},
	{CEGR, 0xffff000000000000, 0xb3c4000000000000, // CONVERT FROM FIXED (64 to short HFP) (CEGR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_Reg_28_31}},
	{CXLFBR, 0xffff000000000000, 0xb392000000000000, // CONVERT FROM LOGICAL (32 to extended BFP) (CXLFBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CXLFTR, 0xffff000000000000, 0xb95b000000000000, // CONVERT FROM LOGICAL (32 to extended DFP) (CXLFTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CDLFBR, 0xffff000000000000, 0xb391000000000000, // CONVERT FROM LOGICAL (32 to long BFP) (CDLFBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CDLFTR, 0xffff000000000000, 0xb953000000000000, // CONVERT FROM LOGICAL (32 to long DFP) (CDLFTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CELFBR, 0xffff000000000000, 0xb390000000000000, // CONVERT FROM LOGICAL (32 to short BFP) (CELFBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CXLGBR, 0xffff000000000000, 0xb3a2000000000000, // CONVERT FROM LOGICAL (64 to extended BFP) (CXLGBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CXLGTR, 0xffff000000000000, 0xb95a000000000000, // CONVERT FROM LOGICAL (64 to extended DFP) (CXLGTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CDLGBR, 0xffff000000000000, 0xb3a1000000000000, // CONVERT FROM LOGICAL (64 to long BFP) (CDLGBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CDLGTR, 0xffff000000000000, 0xb952000000000000, // CONVERT FROM LOGICAL (64 to long DFP) (CDLGTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CELGBR, 0xffff000000000000, 0xb3a0000000000000, // CONVERT FROM LOGICAL (64 to short BFP) (CELGBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CXPT, 0xff00000000ff0000, 0xed00000000af0000, // CONVERT FROM PACKED (to extended DFP) (CXPT R1,D2(L2,B2),M3)
		[7]*argField{ap_FPReg_32_35, ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_Mask_36_39}},
	{CDPT, 0xff00000000ff0000, 0xed00000000ae0000, // CONVERT FROM PACKED (to long DFP) (CDPT R1,D2(L2,B2),M3)
		[7]*argField{ap_FPReg_32_35, ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_Mask_36_39}},
	{CXSTR, 0xffff000000000000, 0xb3fb000000000000, // CONVERT FROM SIGNED PACKED (128 to extended DFP) (CXSTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CDSTR, 0xffff000000000000, 0xb3f3000000000000, // CONVERT FROM SIGNED PACKED (64 to long DFP) (CDSTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CXUTR, 0xffff000000000000, 0xb3fa000000000000, // CONVERT FROM UNSIGNED PACKED (128 to ext. DFP) (CXUTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CDUTR, 0xffff000000000000, 0xb3f2000000000000, // CONVERT FROM UNSIGNED PACKED (64 to long DFP) (CDUTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CXZT, 0xff00000000ff0000, 0xed00000000ab0000, // CONVERT FROM ZONED (to extended DFP) (CXZT R1,D2(L2,B2),M3)
		[7]*argField{ap_FPReg_32_35, ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_Mask_36_39}},
	{CDZT, 0xff00000000ff0000, 0xed00000000aa0000, // CONVERT FROM ZONED (to long DFP) (CDZT R1,D2(L2,B2),M3)
		[7]*argField{ap_FPReg_32_35, ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_Mask_36_39}},
	{TBEDR, 0xffff000000000000, 0xb350000000000000, // CONVERT HFP TO BFP (long to short) (TBEDR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{TBDR, 0xffff000000000000, 0xb351000000000000, // CONVERT HFP TO BFP (long) (TBDR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CVB, 0xff00000000000000, 0x4f00000000000000, // CONVERT TO BINARY (32) (CVB R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CVBY, 0xff00000000ff0000, 0xe300000000060000, // CONVERT TO BINARY (32) (CVBY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CVBG, 0xff00000000ff0000, 0xe3000000000e0000, // CONVERT TO BINARY (64) (CVBG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CVD, 0xff00000000000000, 0x4e00000000000000, // CONVERT TO DECIMAL (32) (CVD R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CVDY, 0xff00000000ff0000, 0xe300000000260000, // CONVERT TO DECIMAL (32) (CVDY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CVDG, 0xff00000000ff0000, 0xe3000000002e0000, // CONVERT TO DECIMAL (64) (CVDG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{CFXBR, 0xffff000000000000, 0xb39a000000000000, // CONVERT TO FIXED (extended BFP to 32) (CFXBR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFXBRA, 0xffff000000000000, 0xb39a000000000000, // CONVERT TO FIXED (extended BFP to 32) (CFXBRA R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGXBR, 0xffff000000000000, 0xb3aa000000000000, // CONVERT TO FIXED (extended BFP to 64) (CGXBR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGXBRA, 0xffff000000000000, 0xb3aa000000000000, // CONVERT TO FIXED (extended BFP to 64) (CGXBRA R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFXTR, 0xffff000000000000, 0xb949000000000000, // CONVERT TO FIXED (extended DFP to 32) (CFXTR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGXTR, 0xffff000000000000, 0xb3e9000000000000, // CONVERT TO FIXED (extended DFP to 64) (CGXTR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGXTRA, 0xffff000000000000, 0xb3e9000000000000, // CONVERT TO FIXED (extended DFP to 64) (CGXTRA R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFXR, 0xffff000000000000, 0xb3ba000000000000, // CONVERT TO FIXED (extended HFP to 32) (CFXR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGXR, 0xffff000000000000, 0xb3ca000000000000, // CONVERT TO FIXED (extended HFP to 64) (CGXR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFDBR, 0xffff000000000000, 0xb399000000000000, // CONVERT TO FIXED (long BFP to 32) (CFDBR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFDBRA, 0xffff000000000000, 0xb399000000000000, // CONVERT TO FIXED (long BFP to 32) (CFDBRA R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGDBR, 0xffff000000000000, 0xb3a9000000000000, // CONVERT TO FIXED (long BFP to 64) (CGDBR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGDBRA, 0xffff000000000000, 0xb3a9000000000000, // CONVERT TO FIXED (long BFP to 64) (CGDBRA R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFDTR, 0xffff000000000000, 0xb941000000000000, // CONVERT TO FIXED (long DFP to 32) (CFDTR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGDTR, 0xffff000000000000, 0xb3e1000000000000, // CONVERT TO FIXED (long DFP to 64) (CGDTR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGDTRA, 0xffff000000000000, 0xb3e1000000000000, // CONVERT TO FIXED (long DFP to 64) (CGDTRA R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFDR, 0xffff000000000000, 0xb3b9000000000000, // CONVERT TO FIXED (long HFP to 32) (CFDR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGDR, 0xffff000000000000, 0xb3c9000000000000, // CONVERT TO FIXED (long HFP to 64) (CGDR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFEBR, 0xffff000000000000, 0xb398000000000000, // CONVERT TO FIXED (short BFP to 32) (CFEBR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFEBRA, 0xffff000000000000, 0xb398000000000000, // CONVERT TO FIXED (short BFP to 32) (CFEBRA R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGEBR, 0xffff000000000000, 0xb3a8000000000000, // CONVERT TO FIXED (short BFP to 64) (CGEBR R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGEBRA, 0xffff000000000000, 0xb3a8000000000000, // CONVERT TO FIXED (short BFP to 64) (CGEBRA R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CFER, 0xffff000000000000, 0xb3b8000000000000, // CONVERT TO FIXED (short HFP to 32) (CFER R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CGER, 0xffff000000000000, 0xb3c8000000000000, // CONVERT TO FIXED (short HFP to 64) (CGER R1,M3,R2)
		[7]*argField{ap_Reg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLFXBR, 0xffff000000000000, 0xb39e000000000000, // CONVERT TO LOGICAL (extended BFP to 32) (CLFXBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLGXBR, 0xffff000000000000, 0xb3ae000000000000, // CONVERT TO LOGICAL (extended BFP to 64) (CLGXBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLFXTR, 0xffff000000000000, 0xb94b000000000000, // CONVERT TO LOGICAL (extended DFP to 32) (CLFXTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLGXTR, 0xffff000000000000, 0xb94a000000000000, // CONVERT TO LOGICAL (extended DFP to 64) (CLGXTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLFDBR, 0xffff000000000000, 0xb39d000000000000, // CONVERT TO LOGICAL (long BFP to 32) (CLFDBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLGDBR, 0xffff000000000000, 0xb3ad000000000000, // CONVERT TO LOGICAL (long BFP to 64) (CLGDBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLFDTR, 0xffff000000000000, 0xb943000000000000, // CONVERT TO LOGICAL (long DFP to 32) (CLFDTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLGDTR, 0xffff000000000000, 0xb942000000000000, // CONVERT TO LOGICAL (long DFP to 64) (CLGDTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLFEBR, 0xffff000000000000, 0xb39c000000000000, // CONVERT TO LOGICAL (short BFP to 32) (CLFEBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CLGEBR, 0xffff000000000000, 0xb3ac000000000000, // CONVERT TO LOGICAL (short BFP to 64) (CLGEBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{CPXT, 0xff00000000ff0000, 0xed00000000ad0000, // CONVERT TO PACKED (from extended DFP) (CPXT R1,D2(L2,B2),M3)
		[7]*argField{ap_FPReg_32_35, ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_Mask_36_39}},
	{CPDT, 0xff00000000ff0000, 0xed00000000ac0000, // CONVERT TO PACKED (from long DFP) (CPDT R1,D2(L2,B2),M3)
		[7]*argField{ap_FPReg_32_35, ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_Mask_36_39}},
	{CSXTR, 0xffff000000000000, 0xb3eb000000000000, // CONVERT TO SIGNED PACKED (extended DFP to 128) (CSXTR R1,R2,M4)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_Mask_20_23}},
	{CSDTR, 0xffff000000000000, 0xb3e3000000000000, // CONVERT TO SIGNED PACKED (long DFP to 64) (CSDTR R1,R2,M4)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_Mask_20_23}},
	{CUXTR, 0xffff000000000000, 0xb3ea000000000000, // CONVERTTOUNSIGNEDPACKED(extendedDFP to 128) (CUXTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CUDTR, 0xffff000000000000, 0xb3e2000000000000, // CONVERT TO UNSIGNED PACKED (long DFP to 64) (CUDTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{CZXT, 0xff00000000ff0000, 0xed00000000a90000, // CONVERT TO ZONED (from extended DFP) (CZXT R1,D2(L2,B2),M3)
		[7]*argField{ap_Reg_32_35, ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_Mask_36_39}},
	{CZDT, 0xff00000000ff0000, 0xed00000000a80000, // CONVERT TO ZONED (from long DFP) (CZDT R1,D2(L2,B2),M3)
		[7]*argField{ap_Reg_32_35, ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_Mask_36_39}},
	{CUUTF, 0xffff000000000000, 0xb2a6000000000000, // CONVERT UNICODE TO UTF-8 (CUUTF R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CU24, 0xffff000000000000, 0xb9b1000000000000, // CONVERT UTF-16 TO UTF-32 (CU24 R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CU21, 0xffff000000000000, 0xb2a6000000000000, // CONVERT UTF-16 TO UTF-8 (CU21 R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CUTFU, 0xffff000000000000, 0xb2a7000000000000, // CONVERT UTF-8 TO UNICODE (CUTFU R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CU12, 0xffff000000000000, 0xb2a7000000000000, // CONVERT UTF-8 TO UTF-16 (CU12 R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CU14, 0xffff000000000000, 0xb9b0000000000000, // CONVERT UTF-8 TO UTF-32 (CU14 R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{CU42, 0xffff000000000000, 0xb9b3000000000000, // CONVERT UTF-32 TO UTF-16 (CU42 R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CU41, 0xffff000000000000, 0xb9b2000000000000, // CONVERT UTF-32 TO UTF-8 (CU41 R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CPYA, 0xffff000000000000, 0xb24d000000000000, // COPY ACCESS (CPYA R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{CPSDR, 0xffff000000000000, 0xb372000000000000, // COPY SIGN (long) (CPSDR R1,R3,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_16_19, ap_FPReg_28_31}},
	{VSCSHP, 0xff00000000ff0000, 0xe6000000007c0000, // DECIMAL SCALE AND CONVERT AND SPLIT TO HFP (VSCSHP V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VSCHP, 0xff00000000ff0000, 0xe600000000740000, // DECIMAL SCALE AND CONVERT TO HFP (VSCHP V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{DFLTCC, 0xffff000000000000, 0xb939000000000000, // DEFLATE CONVERSION CALL (DFLTCC R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{D, 0xff00000000000000, 0x5d00000000000000, // DIVIDE (32→64) (D R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{DR, 0xff00000000000000, 0x1d00000000000000, // DIVIDE (32←64) (DR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{DXBR, 0xffff000000000000, 0xb34d000000000000, // DIVIDE (extended BFP) (DXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{DXTR, 0xffff000000000000, 0xb3d9000000000000, // DIVIDE (extended DFP) (DXTR R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{DXTRA, 0xffff000000000000, 0xb3d9000000000000, // DIVIDE (extended DFP) (DXTRA R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{DXR, 0xffff000000000000, 0xb22d000000000000, // DIVIDE (extended HFP) (DXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{DDB, 0xff00000000ff0000, 0xed000000001d0000, // DIVIDE (long BFP) (DDB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{DDBR, 0xffff000000000000, 0xb31d000000000000, // DIVIDE (long BFP) (DDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{DDTR, 0xffff000000000000, 0xb3d1000000000000, // DIVIDE (long DFP) (DDTR R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{DDTRA, 0xffff000000000000, 0xb3d1000000000000, // DIVIDE (long DFP) (DDTRA R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{DD, 0xff00000000000000, 0x6d00000000000000, // DIVIDE (long HFP) (DD R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{DDR, 0xff00000000000000, 0x2d00000000000000, // DIVIDE (long HFP) (DDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{DEB, 0xff00000000ff0000, 0xed000000000d0000, // DIVIDE (short BFP) (DEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{DEBR, 0xffff000000000000, 0xb30d000000000000, // DIVIDE (short BFP) (DEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{DE, 0xff00000000000000, 0x7d00000000000000, // DIVIDE (short HFP) (DE R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{DER, 0xff00000000000000, 0x3d00000000000000, // DIVIDE (short HFP) (DER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{DP, 0xff00000000000000, 0xfd00000000000000, // DIVIDE DECIMAL (DP D1(L1,B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_12_15, ap_BaseReg_32_35}},
	{DL, 0xff00000000ff0000, 0xe300000000970000, // DIVIDE LOGICAL (32→64) (DL R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{DLR, 0xffff000000000000, 0xb997000000000000, // DIVIDE LOGICAL (32←64) (DLR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{DLG, 0xff00000000ff0000, 0xe300000000870000, // DIVIDE LOGICAL (64←128) (DLG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{DLGR, 0xffff000000000000, 0xb987000000000000, // DIVIDE LOGICAL (64→128) (DLGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{DSG, 0xff00000000ff0000, 0xe3000000000d0000, // DIVIDE SINGLE (64) (DSG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{DSGR, 0xffff000000000000, 0xb90d000000000000, // DIVIDE SINGLE (64) (DSGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{DSGF, 0xff00000000ff0000, 0xe3000000001d0000, // DIVIDE SINGLE (64←32) (DSGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{DSGFR, 0xffff000000000000, 0xb91d000000000000, // DIVIDE SINGLE (64→32) (DSGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{DIDBR, 0xffff000000000000, 0xb35b000000000000, // DIVIDE TO INTEGER (long BFP) (DIDBR R1,R3,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_16_19, ap_FPReg_28_31}},
	{DIEBR, 0xffff000000000000, 0xb353000000000000, // DIVIDE TO INTEGER (short BFP) (DIEBR R1,R3,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_16_19, ap_FPReg_28_31}},
	{ED, 0xff00000000000000, 0xde00000000000000, // EDIT (ED D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{EDMK, 0xff00000000000000, 0xdf00000000000000, // EDIT AND MARK (EDMK D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{X, 0xff00000000000000, 0x5700000000000000, // EXCLUSIVE OR (32) (X R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{XR, 0xff00000000000000, 0x1700000000000000, // EXCLUSIVE OR (32) (XR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{XRK, 0xffff000000000000, 0xb9f7000000000000, // EXCLUSIVE OR (32) (XRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{XY, 0xff00000000ff0000, 0xe300000000570000, // EXCLUSIVE OR (32) (XY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{XG, 0xff00000000ff0000, 0xe300000000820000, // EXCLUSIVE OR (64) (XG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{XGR, 0xffff000000000000, 0xb982000000000000, // EXCLUSIVE OR (64) (XGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{XGRK, 0xffff000000000000, 0xb9e7000000000000, // EXCLUSIVE OR (64) (XGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{XC, 0xff00000000000000, 0xd700000000000000, // EXCLUSIVE OR (character) (XC D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{XI, 0xff00000000000000, 0x9700000000000000, // EXCLUSIVE OR (immediate) (XI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{XIY, 0xff00000000ff0000, 0xeb00000000570000, // EXCLUSIVE OR (immediate) (XIY D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{XIHF, 0xff0f000000000000, 0xc006000000000000, // EXCLUSIVE OR IMMEDIATE (high) (XIHF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{XILF, 0xff0f000000000000, 0xc007000000000000, // EXCLUSIVE OR IMMEDIATE (low) (XILF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{EX, 0xff00000000000000, 0x4400000000000000, // EXECUTE (EX R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{EXRL, 0xff00000000000000, 0xc600000000000000, // EXECUTE RELATIVE LONG (EXRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{EAR, 0xffff000000000000, 0xb24f000000000000, // EXTRACT ACCESS (EAR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ESEA, 0xffff000000000000, 0xb99d000000000000, // EXTRACT AND SET EXTENDED AUTHORITY (ESEA R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{EEXTR, 0xffff000000000000, 0xb3ed000000000000, // EXTRACT BIASED EXPONENT (extended DFP to 64) (EEXTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{EEDTR, 0xffff000000000000, 0xb3e5000000000000, // EXTRACT BIASED EXPONENT (long DFP to 64) (EEDTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{ECAG, 0xff00000000ff0000, 0xeb000000004c0000, // EXTRACT CPU ATTRIBUTE (ECAG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{ECTG, 0xff0f000000000000, 0xc801000000000000, // EXTRACT CPU TIME (ECTG D1(B1),D2(B2),R3)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35, ap_Reg_8_11}},
	{EFPC, 0xffff000000000000, 0xb38c000000000000, // EXTRACT FPC (EFPC R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{EPAR, 0xffff000000000000, 0xb226000000000000, // EXTRACT PRIMARY ASN (EPAR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{EPAIR, 0xffff000000000000, 0xb99a000000000000, // EXTRACT PRIMARY ASN AND INSTANCE (EPAIR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{EPSW, 0xffff000000000000, 0xb98d000000000000, // EXTRACT PSW (EPSW R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ESAR, 0xffff000000000000, 0xb227000000000000, // EXTRACT SECONDARY ASN (ESAR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ESAIR, 0xffff000000000000, 0xb99b000000000000, // EXTRACT SECONDARY ASN AND INSTANCE (ESAIR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ESXTR, 0xffff000000000000, 0xb3ef000000000000, // EXTRACT SIGNIFICANCE (extended DFP to 64) (ESXTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{ESDTR, 0xffff000000000000, 0xb3e7000000000000, // EXTRACT SIGNIFICANCE (long DFP to 64) (ESDTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{EREG, 0xffff000000000000, 0xb249000000000000, // EXTRACT STACKED REGISTERS (32) (EREG R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{EREGG, 0xffff000000000000, 0xb90e000000000000, // EXTRACT STACKED REGISTERS (64) (EREGG R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ESTA, 0xffff000000000000, 0xb24a000000000000, // EXTRACT STACKED STATE (ESTA R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ETND, 0xffff000000000000, 0xb2ec000000000000, // EXTRACT TRANSACTION NESTING DEPTH (ETND R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{FLOGR, 0xffff000000000000, 0xb983000000000000, // FIND LEFTMOST ONE (FLOGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{HSCH, 0xffff000000000000, 0xb231000000000000, // HALT SUBCHANNEL (HSCH)
		[7]*argField{}},
	{HDR, 0xff00000000000000, 0x2400000000000000, // HALVE (long HFP) (HDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{HER, 0xff00000000000000, 0x3400000000000000, // HALVE (short HFP) (HER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{IAC, 0xffff000000000000, 0xb224000000000000, // INSERT ADDRESS SPACE CONTROL (IAC R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{IEXTR, 0xffff000000000000, 0xb3fe000000000000, // INSERT BIASED EXPONENT (64 to extended DFP) (IEXTR R1,R3,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_16_19, ap_FPReg_28_31}},
	{IEDTR, 0xffff000000000000, 0xb3f6000000000000, // INSERT BIASED EXPONENT (64 to long DFP) (IEDTR R1,R3,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_16_19, ap_FPReg_28_31}},
	{IC, 0xff00000000000000, 0x4300000000000000, // INSERT CHARACTER (IC R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{ICY, 0xff00000000ff0000, 0xe300000000730000, // INSERT CHARACTER (ICY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{ICMH, 0xff00000000ff0000, 0xeb00000000800000, // INSERT CHARACTERS UNDER MASK (high) (ICMH R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{ICM, 0xff00000000000000, 0xbf00000000000000, // INSERT CHARACTERS UNDER MASK (low) (ICM R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{ICMY, 0xff00000000ff0000, 0xeb00000000810000, // INSERT CHARACTERS UNDER MASK (low) (ICMY R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{IIHH, 0xff00000000000000, 0xa500000000000000, // INSERT IMMEDIATE (high high) (IIHH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{IIHL, 0xff0f000000000000, 0xa501000000000000, // INSERT IMMEDIATE (high low) (IIHL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{IIHF, 0xff0f000000000000, 0xc008000000000000, // INSERT IMMEDIATE (high) (IIHF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{IILH, 0xff0f000000000000, 0xa502000000000000, // INSERT IMMEDIATE (low high) (IILH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{IILL, 0xff0f000000000000, 0xa503000000000000, // INSERT IMMEDIATE (low low) (IILL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{IILF, 0xff0f000000000000, 0xc009000000000000, // INSERT IMMEDIATE (low) (IILF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{IPM, 0xffff000000000000, 0xb222000000000000, // INSERT PROGRAM MASK (IPM R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{IPK, 0xffff000000000000, 0xb20b000000000000, // INSERT PSW KEY (IPK)
		[7]*argField{}},
	{IRBM, 0xffff000000000000, 0xb9ac000000000000, // INSERT REFERENCE BITS MULTIPLE (IRBM R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ISKE, 0xffff000000000000, 0xb229000000000000, // INSERT STORAGE KEY EXTENDED (ISKE R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{IVSK, 0xffff000000000000, 0xb223000000000000, // INSERT VIRTUAL STORAGE KEY (IVSK R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{IDTE, 0xffff000000000000, 0xb98e000000000000, // INVALIDATE DAT TABLE ENTRY (IDTE R1,R3,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_16_19, ap_Reg_28_31}},
	{IPTE, 0xffff000000000000, 0xb221000000000000, // INVALIDATE PAGE TABLE ENTRY (IPTE R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{L, 0xff00000000000000, 0x5800000000000000, // LOAD (32) (L R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LR, 0xff00000000000000, 0x1800000000000000, // LOAD (32) (LR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{LY, 0xff00000000ff0000, 0xe300000000580000, // LOAD (32) (LY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LG, 0xff00000000ff0000, 0xe300000000040000, // LOAD (64) (LG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LGR, 0xffff000000000000, 0xb904000000000000, // LOAD (64) (LGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LGF, 0xff00000000ff0000, 0xe300000000140000, // LOAD (64←32) (LGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LGFR, 0xffff000000000000, 0xb914000000000000, // LOAD (64←32) (LGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LXR, 0xffff000000000000, 0xb365000000000000, // LOAD (extended) (LXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LD, 0xff00000000000000, 0x6800000000000000, // LOAD (long) (LD R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LDR, 0xff00000000000000, 0x2800000000000000, // LOAD (long) (LDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LDY, 0xff00000000ff0000, 0xed00000000650000, // LOAD (long) (LDY R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LE, 0xff00000000000000, 0x7800000000000000, // LOAD (short) (LE R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LER, 0xff00000000000000, 0x3800000000000000, // LOAD (short) (LER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LEY, 0xff00000000ff0000, 0xed00000000640000, // LOAD (short) (LEY R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LAM, 0xff00000000000000, 0x4100000000000000, // LOAD ACCESS MULTIPLE (LAM R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{LAY, 0xff00000000ff0000, 0xe300000000710000, // LOAD ADDRESS (LAY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LAE, 0xff00000000000000, 0x5100000000000000, // LOAD ADDRESS EXTENDED (LAE R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LAEY, 0xff00000000ff0000, 0xe300000000750000, // LOAD ADDRESS EXTENDED (LAEY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LARL, 0xff00000000000000, 0xc000000000000000, // LOAD ADDRESS RELATIVE LONG (LARL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{LASP, 0xffff000000000000, 0xe500000000000000, // LOAD ADDRESS SPACE PARAMETERS (LASP D1(B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{LAA, 0xff00000000ff0000, 0xeb00000000f80000, // LOAD AND ADD (32) (LAA R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LAAG, 0xff00000000ff0000, 0xeb00000000e80000, // LOAD AND ADD (64) (LAAG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LAAL, 0xff00000000ff0000, 0xeb00000000fa0000, // LOAD AND ADD LOGICAL (32) (LAAL R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LAALG, 0xff00000000ff0000, 0xeb00000000ea0000, // LOAD AND ADD LOGICAL (64) (LAALG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LAN, 0xff00000000ff0000, 0xeb00000000f40000, // LOAD AND AND (32) (LAN R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LANG, 0xff00000000ff0000, 0xeb00000000e40000, // LOAD AND AND (64) (LANG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LAX, 0xff00000000ff0000, 0xeb00000000f70000, // LOAD AND EXCLUSIVE OR (32) (LAX R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LAXG, 0xff00000000ff0000, 0xeb00000000e70000, // LOAD AND EXCLUSIVE OR (64) (LAXG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LAO, 0xff00000000ff0000, 0xeb00000000f60000, // LOAD AND OR (32) (LAO R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LAOG, 0xff00000000ff0000, 0xeb00000000e60000, // LOAD AND OR (64) (LAOG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LT, 0xff00000000ff0000, 0xe300000000120000, // LOAD AND TEST (32) (LT R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LTR, 0xff00000000000000, 0x1200000000000000, // LOAD AND TEST (32) (LTR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{LTG, 0xff00000000ff0000, 0xe300000000020000, // LOAD AND TEST (64) (LTG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LTGR, 0xffff000000000000, 0xb902000000000000, // LOAD AND TEST (64) (LTGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LTGF, 0xff00000000ff0000, 0xe300000000320000, // LOAD AND TEST (64→32) (LTGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LTGFR, 0xffff000000000000, 0xb912000000000000, // LOAD AND TEST (64→32) (LTGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LTXBR, 0xffff000000000000, 0xb342000000000000, // LOAD AND TEST (extended BFP) (LTXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LTXTR, 0xffff000000000000, 0xb3de000000000000, // LOAD AND TEST (extended DFP) (LTXTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LTXR, 0xffff000000000000, 0xb362000000000000, // LOAD AND TEST (extended HFP) (LTXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LTDBR, 0xffff000000000000, 0xb312000000000000, // LOAD AND TEST (long BFP) (LTDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LTDTR, 0xffff000000000000, 0xb3d6000000000000, // LOAD AND TEST (long DFP) (LTDTR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LTDR, 0xff00000000000000, 0x2200000000000000, // LOAD AND TEST (long HFP) (LTDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LTEBR, 0xffff000000000000, 0xb302000000000000, // LOAD AND TEST (short BFP) (LTEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LTER, 0xff00000000000000, 0x3200000000000000, // LOAD AND TEST (short HFP) (LTER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LAT, 0xff00000000ff0000, 0xe3000000009f0000, // LOAD AND TRAP (32L→32) (LAT R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LGAT, 0xff00000000ff0000, 0xe300000000850000, // LOAD AND TRAP (64) (LGAT R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LZRF, 0xff00000000ff0000, 0xe3000000003b0000, // LOAD AND ZERO RIGHTMOST BYTE (32) (LZRF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LZRG, 0xff00000000ff0000, 0xe3000000002a0000, // LOAD AND ZERO RIGHTMOST BYTE (64) (LZRG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LBEAR, 0xffff000000000000, 0xb200000000000000, // LOAD BEAR (LBEAR D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{LB, 0xff00000000ff0000, 0xe300000000760000, // LOAD BYTE (32→8) (LB R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LBR, 0xffff000000000000, 0xb926000000000000, // LOAD BYTE (32←8) (LBR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LGB, 0xff00000000ff0000, 0xe300000000770000, // LOAD BYTE (64→8) (LGB R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LGBR, 0xffff000000000000, 0xb906000000000000, // LOAD BYTE (64←8) (LGBR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LBH, 0xff00000000ff0000, 0xe300000000c00000, // LOAD BYTE HIGH (32←8) (LBH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LCR, 0xff00000000000000, 0x1300000000000000, // LOAD COMPLEMENT (32) (LCR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{LCGR, 0xffff000000000000, 0xb903000000000000, // LOAD COMPLEMENT (64) (LCGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LCGFR, 0xffff000000000000, 0xb913000000000000, // LOAD COMPLEMENT (64←32) (LCGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LCXBR, 0xffff000000000000, 0xb343000000000000, // LOAD COMPLEMENT (extended BFP) (LCXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LCXR, 0xffff000000000000, 0xb363000000000000, // LOAD COMPLEMENT (extended HFP) (LCXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LCDBR, 0xffff000000000000, 0xb313000000000000, // LOAD COMPLEMENT (long BFP) (LCDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LCDR, 0xff00000000000000, 0x2300000000000000, // LOAD COMPLEMENT (long HFP) (LCDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LCDFR, 0xffff000000000000, 0xb373000000000000, // LOAD COMPLEMENT (long) (LCDFR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LCEBR, 0xffff000000000000, 0xb303000000000000, // LOAD COMPLEMENT (short BFP) (LCEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LCER, 0xff00000000000000, 0x3300000000000000, // LOAD COMPLEMENT (short HFP) (LCER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LCTL, 0xff00000000000000, 0xb700000000000000, // LOAD CONTROL (32) (LCTL R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{LCTLG, 0xff00000000ff0000, 0xeb000000002f0000, // LOAD CONTROL (64) (LCTLG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LCBB, 0xff00000000ff0000, 0xe700000000270000, // LOAD COUNT TO BLOCK BOUNDARY (LCBB R1,D2(X2,B2),M3)
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{FIXBR, 0xffff000000000000, 0xb347000000000000, // LOAD FP INTEGER (extended BFP) (FIXBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{FIXBRA, 0xffff000000000000, 0xb347000000000000, // LOAD FP INTEGER (extended BFP) (FIXBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{FIXTR, 0xffff000000000000, 0xb3df000000000000, // LOAD FP INTEGER (extended DFP) (FIXTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{FIXR, 0xffff000000000000, 0xb367000000000000, // LOAD FP INTEGER (extended HFP) (FIXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{FIDBR, 0xffff000000000000, 0xb35f000000000000, // LOAD FP INTEGER (long BFP) (FIDBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{FIDBRA, 0xffff000000000000, 0xb35f000000000000, // LOAD FP INTEGER (long BFP) (FIDBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{FIDTR, 0xffff000000000000, 0xb3d7000000000000, // LOAD FP INTEGER (long DFP) (FIDTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{FIDR, 0xffff000000000000, 0xb37f000000000000, // LOAD FP INTEGER (long HFP) (FIDR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{FIEBR, 0xffff000000000000, 0xb357000000000000, // LOAD FP INTEGER (short BFP) (FIEBR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{FIEBRA, 0xffff000000000000, 0xb357000000000000, // LOAD FP INTEGER (short BFP) (FIEBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{FIER, 0xffff000000000000, 0xb377000000000000, // LOAD FP INTEGER (short HFP) (FIER R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LFPC, 0xffff000000000000, 0xb29d000000000000, // LOAD FPC (LFPC D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{LFAS, 0xffff000000000000, 0xb2bd000000000000, // LOAD FPC AND SIGNAL (LFAS D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{LDGR, 0xffff000000000000, 0xb3c1000000000000, // LOAD FPR FROM GR (64 to long) (LDGR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LGDR, 0xffff000000000000, 0xb3cd000000000000, // LOAD GR FROM FPR (long to 64) (LGDR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LGG, 0xff00000000ff0000, 0xe3000000004c0000, // LOAD GUARDED (64) (LGG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LGSC, 0xff00000000ff0000, 0xe3000000004d0000, // LOAD GUARDED STORAGE CONTROLS (LGSC R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LH, 0xff00000000000000, 0x4800000000000000, // LOAD HALFWORD (32→16) (LH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LHR, 0xffff000000000000, 0xb927000000000000, // LOAD HALFWORD (32←16) (LHR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LHY, 0xff00000000ff0000, 0xe300000000780000, // LOAD HALFWORD (32←16) (LHY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LGH, 0xff00000000ff0000, 0xe300000000150000, // LOAD HALFWORD (64←16) (LGH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LGHR, 0xffff000000000000, 0xb907000000000000, // LOAD HALFWORD (64←16) (LGHR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LHH, 0xff00000000ff0000, 0xe300000000c40000, // LOAD HALFWORD HIGH (32→16) (LHH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LOCHHI, 0xff00000000ff0000, 0xec000000004e0000, // LOAD HALFWORD HIGH IMMEDIATE ON (LOCHHI R1,I2,M3)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31, ap_Mask_12_15}},
	{LHI, 0xff0f000000000000, 0xa708000000000000, // CONDITION (32←16)LOAD HALFWORD IMMEDIATE (32)←16 (LHI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned16_16_31}},
	{LGHI, 0xff0f000000000000, 0xa709000000000000, // LOAD HALFWORD IMMEDIATE (64→16) (LGHI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmSigned16_16_31}},
	{LOCHI, 0xff00000000ff0000, 0xec00000000420000, // LOAD HALFWORD IMMEDIATE ON CONDITION(32←16) (LOCHI R1,I2,M3)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31, ap_Mask_12_15}},
	{LOCGHI, 0xff00000000ff0000, 0xec00000000460000, // LOAD HALFWORD IMMEDIATE ON CONDITION(64→16) (LOCGHI R1,I2,M3)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31, ap_Mask_12_15}},
	{LHRL, 0xff0f000000000000, 0xc405000000000000, // LOAD HALFWORD RELATIVE LONG (32←16) (LHRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{LGHRL, 0xff0f000000000000, 0xc404000000000000, // LOAD HALFWORD RELATIVE LONG (64←16) (LGHRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{LFH, 0xff00000000ff0000, 0xe300000000ca0000, // LOAD HIGH (32) (LFH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LFHAT, 0xff00000000ff0000, 0xe300000000c80000, // LOAD HIGH AND TRAP (32H←32) (LFHAT R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LOCFH, 0xff00000000ff0000, 0xeb00000000e00000, // LOAD HIGH ON CONDITION (32) (LOCFH R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LOCFHR, 0xffff000000000000, 0xb9e0000000000000, // LOAD HIGH ON CONDITION (32) (LOCFHR R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{LGFI, 0xff0f000000000000, 0xc001000000000000, // LOAD IMMEDIATE (64→32) (LGFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{LXDB, 0xff00000000ff0000, 0xed00000000050000, // LOAD LENGTHENED (long to extended BFP) (LXDB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{LXDBR, 0xffff000000000000, 0xb305000000000000, // LOAD LENGTHENED (long to extended BFP) (LXDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LXDTR, 0xffff000000000000, 0xb3dc000000000000, // LOAD LENGTHENED (long to extended DFP) (LXDTR R1,R2,M4)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_Mask_20_23}},
	{LXD, 0xff00000000ff0000, 0xed00000000250000, // LOAD LENGTHENED (long to extended HFP) (LXD R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{LXDR, 0xffff000000000000, 0xb325000000000000, // LOAD LENGTHENED (long to extended HFP) (LXDR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LXEB, 0xff00000000ff0000, 0xed00000000060000, // LOAD LENGTHENED (short to extended BFP) (LXEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{LXEBR, 0xffff000000000000, 0xb306000000000000, // LOAD LENGTHENED (short to extended BFP) (LXEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LXE, 0xff00000000ff0000, 0xed00000000260000, // LOAD LENGTHENED (short to extended HFP) (LXE R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{LXER, 0xffff000000000000, 0xb326000000000000, // LOAD LENGTHENED (short to extended HFP) (LXER R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LDEB, 0xff00000000ff0000, 0xed00000000040000, // LOAD LENGTHENED (short to long BFP) (LDEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{LDEBR, 0xffff000000000000, 0xb304000000000000, // LOAD LENGTHENED (short to long BFP) (LDEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LDETR, 0xffff000000000000, 0xb3d4000000000000, // LOAD LENGTHENED (short to long DFP) (LDETR R1,R2,M4)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_Mask_20_23}},
	{LDE, 0xff00000000ff0000, 0xed00000000240000, // LOAD LENGTHENED (short to long HFP) (LDE R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{LDER, 0xffff000000000000, 0xb324000000000000, // LOAD LENGTHENED (short to long HFP) (LDER R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LLGF, 0xff00000000ff0000, 0xe300000000160000, // LOAD LOGICAL (64←32) (LLGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLGFR, 0xffff000000000000, 0xb916000000000000, // LOAD LOGICAL (64←32) (LLGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LLGFSG, 0xff00000000ff0000, 0xe300000000480000, // LOAD LOGICAL AND SHIFT GUARDED (64←32) (LLGFSG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLGFAT, 0xff00000000ff0000, 0xe3000000009d0000, // LOAD LOGICAL AND TRAP (64→32) (LLGFAT R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLZRGF, 0xff00000000ff0000, 0xe3000000003a0000, // LOAD LOGICAL AND ZERO RIGHTMOST BYTE(64→32) (LLZRGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLC, 0xff00000000ff0000, 0xe300000000940000, // LOAD LOGICAL CHARACTER (32→8) (LLC R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLCR, 0xffff000000000000, 0xb994000000000000, // LOAD LOGICAL CHARACTER (32←8) (LLCR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LLGC, 0xff00000000ff0000, 0xe300000000900000, // LOAD LOGICAL CHARACTER (64←8) (LLGC R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLGCR, 0xffff000000000000, 0xb984000000000000, // LOAD LOGICAL CHARACTER (64←8) (LLGCR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LLCH, 0xff00000000ff0000, 0xe300000000c20000, // LOAD LOGICAL CHARACTER HIGH (32←8) (LLCH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLH, 0xff00000000ff0000, 0xe300000000950000, // LOAD LOGICAL HALFWORD (32←16) (LLH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLHR, 0xffff000000000000, 0xb995000000000000, // LOAD LOGICAL HALFWORD (32←16) (LLHR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LLGH, 0xff00000000ff0000, 0xe300000000910000, // LOAD LOGICAL HALFWORD (64→16) (LLGH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLGHR, 0xffff000000000000, 0xb985000000000000, // LOAD LOGICAL HALFWORD (64←16) (LLGHR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LLHH, 0xff00000000ff0000, 0xe300000000c60000, // LOAD LOGICAL HALFWORD HIGH (32→16) (LLHH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLHRL, 0xff0f000000000000, 0xc402000000000000, // LOAD LOGICAL HALFWORD RELATIVE LONG(32←16) (LLHRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{LLGHRL, 0xff0f000000000000, 0xc406000000000000, // LOAD LOGICAL HALFWORD RELATIVE LONG(64→16) (LLGHRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{LLIHH, 0xff0f000000000000, 0xa50c000000000000, // LOAD LOGICAL IMMEDIATE (high high) (LLIHH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{LLIHL, 0xff0f000000000000, 0xa50d000000000000, // LOAD LOGICAL IMMEDIATE (high low) (LLIHL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{LLIHF, 0xff0f000000000000, 0xc00e000000000000, // LOAD LOGICAL IMMEDIATE (high) (LLIHF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{LLILH, 0xff0f000000000000, 0xa50e000000000000, // LOAD LOGICAL IMMEDIATE (low high) (LLILH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{LLILL, 0xff0f000000000000, 0xa50f000000000000, // LOAD LOGICAL IMMEDIATE (low low) (LLILL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{LLILF, 0xff0f000000000000, 0xc00f000000000000, // LOAD LOGICAL IMMEDIATE (low) (LLILF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{LLGFRL, 0xff0f000000000000, 0xc40e000000000000, // LOAD LOGICAL RELATIVE LONG (64→32) (LLGFRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{LLGT, 0xff00000000ff0000, 0xe300000000170000, // LOAD LOGICAL THIRTY ONE BITS (64→31) (LLGT R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LLGTR, 0xffff000000000000, 0xb917000000000000, // LOAD LOGICAL THIRTY ONE BITS (64→31) (LLGTR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LLGTAT, 0xff00000000ff0000, 0xe3000000009c0000, // LOAD LOGICAL THIRTY ONE BITS AND TRAP(64←31) (LLGTAT R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LM, 0xff00000000000000, 0x9800000000000000, // LOAD MULTIPLE (32) (LM R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{LMY, 0xff00000000ff0000, 0xeb00000000980000, // LOAD MULTIPLE (32) (LMY R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LMG, 0xff00000000ff0000, 0xeb00000000040000, // LOAD MULTIPLE (64) (LMG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LMD, 0xff00000000000000, 0xef00000000000000, // LOAD MULTIPLE DISJOINT (64→32&32) (LMD R1,D2(B2),R3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_Reg_12_15, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{LMH, 0xff00000000ff0000, 0xeb00000000960000, // LOAD MULTIPLE HIGH (32) (LMH R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LNR, 0xff00000000000000, 0x1100000000000000, // LOAD NEGATIVE (32) (LNR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{LNGR, 0xffff000000000000, 0xb901000000000000, // LOAD NEGATIVE (64) (LNGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LNGFR, 0xffff000000000000, 0xb911000000000000, // LOAD NEGATIVE (64→32) (LNGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LNXBR, 0xffff000000000000, 0xb341000000000000, // LOAD NEGATIVE (extended BFP) (LNXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LNXR, 0xffff000000000000, 0xb361000000000000, // LOAD NEGATIVE (extended HFP) (LNXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LNDBR, 0xffff000000000000, 0xb311000000000000, // LOAD NEGATIVE (long BFP) (LNDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LNDR, 0xff00000000000000, 0x2100000000000000, // LOAD NEGATIVE (long HFP) (LNDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LNDFR, 0xffff000000000000, 0xb371000000000000, // LOAD NEGATIVE (long) (LNDFR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LNEBR, 0xffff000000000000, 0xb301000000000000, // LOAD NEGATIVE (short BFP) (LNEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LNER, 0xff00000000000000, 0x3100000000000000, // LOAD NEGATIVE (short HFP) (LNER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LOC, 0xff00000000ff0000, 0xeb00000000f20000, // LOAD ON CONDITION (32) (LOC R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LOCR, 0xffff000000000000, 0xb9f2000000000000, // LOAD ON CONDITION (32) (LOCR R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{LOCG, 0xff00000000ff0000, 0xeb00000000e20000, // LOAD ON CONDITION (64) (LOCG R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{LOCGR, 0xffff000000000000, 0xb9e2000000000000, // LOAD ON CONDITION (64) (LOCGR R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{LPTEA, 0xffff000000000000, 0xb9aa000000000000, // LOAD PAGE TABLE ENTRY ADDRESS (LPTEA R1,R3,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_16_19, ap_Reg_28_31}},
	{LPD, 0xff0f000000000000, 0xc804000000000000, // LOAD PAIR DISJOINT (32) (LPD D1(B1),D2(B2),R3)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35, ap_Reg_8_11}},
	{LPDG, 0xff0f000000000000, 0xc805000000000000, // LOAD PAIR DISJOINT (64) (LPDG D1(B1),D2(B2),R3)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35, ap_Reg_8_11}},
	{LPQ, 0xff00000000ff0000, 0xe3000000008f0000, // LOAD PAIR FROM QUADWORD (64&64←128) (LPQ R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LPR, 0xff00000000000000, 0x1000000000000000, // LOAD POSITIVE (32) (LPR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{LPGR, 0xffff000000000000, 0xb900000000000000, // LOAD POSITIVE (64) (LPGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LPGFR, 0xffff000000000000, 0xb910000000000000, // LOAD POSITIVE (64→32) (LPGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LPXBR, 0xffff000000000000, 0xb340000000000000, // LOAD POSITIVE (extended BFP) (LPXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LPXR, 0xffff000000000000, 0xb360000000000000, // LOAD POSITIVE (extended HFP) (LPXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LPDBR, 0xffff000000000000, 0xb310000000000000, // LOAD POSITIVE (long BFP) (LPDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LPDR, 0xff00000000000000, 0x2000000000000000, // LOAD POSITIVE (long HFP) (LPDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LPDFR, 0xffff000000000000, 0xb370000000000000, // LOAD POSITIVE (long) (LPDFR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LPEBR, 0xffff000000000000, 0xb300000000000000, // LOAD POSITIVE (short BFP) (LPEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LPER, 0xff00000000000000, 0x3000000000000000, // LOAD POSITIVE (short HFP) (LPER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LPSW, 0xff00000000000000, 0x8200000000000000, // LOAD PSW (LPSW D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{LPSWE, 0xffff000000000000, 0xb2b2000000000000, // LOAD PSW EXTENDED (LPSWE D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{LPSWEY, 0xff00000000ff0000, 0xeb00000000710000, // LOAD PSW EXTENDED (LPSWEY D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{LRA, 0xff00000000000000, 0xb100000000000000, // LOAD REAL ADDRESS (32) (LRA R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LRAY, 0xff00000000ff0000, 0xe300000000130000, // LOAD REAL ADDRESS (32) (LRAY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LRAG, 0xff00000000ff0000, 0xe300000000030000, // LOAD REAL ADDRESS (64) (LRAG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LRL, 0xff0f000000000000, 0xc40d000000000000, // LOAD RELATIVE LONG (32) (LRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{LGRL, 0xff0f000000000000, 0xc408000000000000, // LOAD RELATIVE LONG (64) (LGRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{LGFRL, 0xff0f000000000000, 0xc40c000000000000, // LOAD RELATIVE LONG (64→32) (LGFRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{LRVH, 0xff00000000ff0000, 0xe3000000001f0000, // LOAD REVERSED (16) (LRVH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LRV, 0xff00000000ff0000, 0xe3000000001e0000, // LOAD REVERSED (32) (LRV R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LRVR, 0xffff000000000000, 0xb91f000000000000, // LOAD REVERSED (32) (LRVR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LRVG, 0xff00000000ff0000, 0xe3000000000f0000, // LOAD REVERSED (64) (LRVG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{LRVGR, 0xffff000000000000, 0xb90f000000000000, // LOAD REVERSED (64) (LRVGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LDXBR, 0xffff000000000000, 0xb345000000000000, // LOAD ROUNDED (extended to long BFP) (LDXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LDXBRA, 0xffff000000000000, 0xb345000000000000, // LOAD ROUNDED (extended to long BFP) (LDXBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{LDXTR, 0xffff000000000000, 0xb3dd000000000000, // LOAD ROUNDED (extended to long DFP) (LDXTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{LDXR, 0xff00000000000000, 0x2500000000000000, // LOAD ROUNDED (extended to long HFP) (LDXR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LRDR, 0xff00000000000000, 0x2500000000000000, // LOAD ROUNDED (extended to long HFP) (LRDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LEXBR, 0xffff000000000000, 0xb346000000000000, // LOAD ROUNDED (extended to short BFP) (LEXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LEXBRA, 0xffff000000000000, 0xb346000000000000, // LOAD ROUNDED (extended to short BFP) (LEXBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{LEXR, 0xffff000000000000, 0xb366000000000000, // LOAD ROUNDED (extended to short HFP) (LEXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LEDBR, 0xffff000000000000, 0xb344000000000000, // LOAD ROUNDED (long to short BFP) (LEDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LEDBRA, 0xffff000000000000, 0xb344000000000000, // LOAD ROUNDED (long to short BFP) (LEDBRA R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{LEDTR, 0xffff000000000000, 0xb3d5000000000000, // LOAD ROUNDED (long to short DFP) (LEDTR R1,M3,R2)
		[7]*argField{ap_FPReg_24_27, ap_Mask_16_19, ap_FPReg_28_31}},
	{LEDR, 0xff00000000000000, 0x3500000000000000, // LOAD ROUNDED (long to short HFP) (LEDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LRER, 0xff00000000000000, 0x3500000000000000, // LOAD ROUNDED (long to short HFP) (LRER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{LURA, 0xffff000000000000, 0xb24b000000000000, // LOAD USING REAL ADDRESS (32) (LURA R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LURAG, 0xffff000000000000, 0xb905000000000000, // LOAD USING REAL ADDRESS (64) (LURAG R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{LZXR, 0xffff000000000000, 0xb376000000000000, // LOAD ZERO (extended) (LZXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LZDR, 0xffff000000000000, 0xb375000000000000, // LOAD ZERO (long) (LZDR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{LZER, 0xffff000000000000, 0xb374000000000000, // LOAD ZERO (short) (LZER R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{MSTA, 0xffff000000000000, 0xb247000000000000, // MODIFY STACKED STATE (MSTA R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{MSCH, 0xffff000000000000, 0xb232000000000000, // MODIFY SUBCHANNEL (MSCH D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{MC, 0xff00000000000000, 0xaf00000000000000, // MONITOR CALL (MC D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{MVHHI, 0xffff000000000000, 0xe544000000000000, // MOVE (16←16) (MVHHI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_32_47}},
	{MVHI, 0xffff000000000000, 0xe54c000000000000, // MOVE (32→16) (MVHI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_32_47}},
	{MVGHI, 0xffff000000000000, 0xe548000000000000, // MOVE (64←16) (MVGHI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmSigned16_32_47}},
	{MVC, 0xff00000000000000, 0xd200000000000000, // MOVE (character) (MVC D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{MVI, 0xff00000000000000, 0x9200000000000000, // MOVE (immediate) (MVI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{MVIY, 0xff00000000ff0000, 0xeb00000000520000, // MOVE (immediate) (MVIY D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{MVCIN, 0xff00000000000000, 0xe800000000000000, // MOVE INVERSE (MVCIN D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{MVCL, 0xff00000000000000, 0xe00000000000000, // MOVE LONG (MVCL R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{MVCLE, 0xff00000000000000, 0xa800000000000000, // MOVE LONG EXTENDED (MVCLE R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{MVCLU, 0xff00000000ff0000, 0xeb000000008e0000, // MOVE LONG UNICODE (MVCLU R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{MVN, 0xff00000000000000, 0xd100000000000000, // MOVE NUMERICS (MVN D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{MVPG, 0xffff000000000000, 0xb254000000000000, // MOVE PAGE (MVPG R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{MVCRL, 0xffff000000000000, 0xe50a000000000000, // MOVE RIGHT TO LEFT (MVCRL D1(B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{MVST, 0xffff000000000000, 0xb255000000000000, // MOVE STRING (MVST R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{MVCP, 0xff00000000000000, 0xda00000000000000, // MOVE TO PRIMARY (MVCP D1(R1,B1),D2(B2),R3)
		[7]*argField{ap_DispUnsigned_20_31, ap_Reg_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35, ap_Reg_12_15}},
	{MVCS, 0xff00000000000000, 0xdb00000000000000, // MOVE TO SECONDARY (MVCS D1(R1,B1),D2(B2),R3)
		[7]*argField{ap_DispUnsigned_20_31, ap_Reg_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35, ap_Reg_12_15}},
	{MVCDK, 0xffff000000000000, 0xe50f000000000000, // MOVE WITH DESTINATION KEY (MVCDK D1(B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{MVCK, 0xff00000000000000, 0xd900000000000000, // MOVE WITH KEY (MVCK D1(R1,B1),D2(B2),R3)
		[7]*argField{ap_DispUnsigned_20_31, ap_Reg_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35, ap_Reg_12_15}},
	{MVO, 0xff00000000000000, 0xf100000000000000, // MOVE WITH OFFSET (MVO D1(L1,B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_12_15, ap_BaseReg_32_35}},
	{MVCOS, 0xff00000000000000, 0xc800000000000000, // MOVE WITH OPTIONAL SPECIFICATIONS (MVCOS D1(B1),D2(B2),R3)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35, ap_Reg_8_11}},
	{MVCSK, 0xffff000000000000, 0xe50e000000000000, // MOVE WITH SOURCE KEY (MVCSK D1(B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{MVZ, 0xff00000000000000, 0xd300000000000000, // MOVE ZONES (MVZ D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{MG, 0xff00000000ff0000, 0xe300000000840000, // MULTIPLY (128←64) (MG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MGRK, 0xffff000000000000, 0xb9ec000000000000, // MULTIPLY (128←64) (MGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{M, 0xff00000000000000, 0x5c00000000000000, // MULTIPLY (64←32) (M R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MFY, 0xff00000000ff0000, 0xe3000000005c0000, // MULTIPLY (64←32) (MFY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MR, 0xff00000000000000, 0x1c00000000000000, // MULTIPLY (64←32) (MR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{MXBR, 0xffff000000000000, 0xb34c000000000000, // MULTIPLY (extended BFP) (MXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{MXTR, 0xffff000000000000, 0xb3d8000000000000, // MULTIPLY (extended DFP) (MXTR R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{MXTRA, 0xffff000000000000, 0xb3d8000000000000, // MULTIPLY (extended DFP) (MXTRA R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{MXR, 0xff00000000000000, 0x2600000000000000, // MULTIPLY (extended HFP) (MXR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{MDB, 0xff00000000ff0000, 0xed000000001c0000, // MULTIPLY (long BFP) (MDB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{MDBR, 0xffff000000000000, 0xb31c000000000000, // MULTIPLY (long BFP) (MDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{MDTR, 0xffff000000000000, 0xb3d0000000000000, // MULTIPLY (long DFP) (MDTR R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{MDTRA, 0xffff000000000000, 0xb3d0000000000000, // MULTIPLY (long DFP) (MDTRA R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{MD, 0xff00000000000000, 0x6c00000000000000, // MULTIPLY (long HFP) (MD R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MDR, 0xff00000000000000, 0x2c00000000000000, // MULTIPLY (long HFP) (MDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{MXDB, 0xff00000000ff0000, 0xed00000000070000, // MULTIPLY (long to extended BFP) (MXDB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{MXDBR, 0xffff000000000000, 0xb307000000000000, // MULTIPLY (long to extended BFP) (MXDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{MXD, 0xff00000000000000, 0x6700000000000000, // MULTIPLY (long to extended HFP) (MXD R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MXDR, 0xff00000000000000, 0x2700000000000000, // MULTIPLY (long to extended HFP) (MXDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{MEEB, 0xff00000000ff0000, 0xed00000000170000, // MULTIPLY (short BFP) (MEEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{MEEBR, 0xffff000000000000, 0xb317000000000000, // MULTIPLY (short BFP) (MEEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{MEE, 0xff00000000ff0000, 0xed00000000370000, // MULTIPLY (short HFP) (MEE R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{MEER, 0xffff000000000000, 0xb337000000000000, // MULTIPLY (short HFP) (MEER R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{MDEB, 0xff00000000ff0000, 0xed000000000c0000, // MULTIPLY (short to long BFP) (MDEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{MDEBR, 0xffff000000000000, 0xb30c000000000000, // MULTIPLY (short to long BFP) (MDEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{MDE, 0xff00000000000000, 0x7c00000000000000, // MULTIPLY (short to long HFP) (MDE R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MDER, 0xff00000000000000, 0x3c00000000000000, // MULTIPLY (short to long HFP) (MDER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{ME, 0xff00000000000000, 0x7c00000000000000, // MULTIPLY (short to long HFP) (ME R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MER, 0xff00000000000000, 0x3c00000000000000, // MULTIPLY (short to long HFP) (MER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{MAY, 0xff00000000ff0000, 0xed000000003a0000, // MULTIPLY & ADD UNNORMALIZED (long to ext. HFP) (MAY R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MAYR, 0xffff000000000000, 0xb33a000000000000, // MULTIPLY & ADD UNNORMALIZED (long to ext. HFP) (MAYR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MADB, 0xff00000000ff0000, 0xed000000001e0000, // MULTIPLY AND ADD (long BFP) (MADB R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MADBR, 0xffff000000000000, 0xb31e000000000000, // MULTIPLY AND ADD (long BFP) (MADBR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MAD, 0xff00000000ff0000, 0xed000000003e0000, // MULTIPLY AND ADD (long HFP) (MAD R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MADR, 0xffff000000000000, 0xb33e000000000000, // MULTIPLY AND ADD (long HFP) (MADR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MAEB, 0xff00000000ff0000, 0xed000000000e0000, // MULTIPLY AND ADD (short BFP) (MAEB R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MAEBR, 0xffff000000000000, 0xb30e000000000000, // MULTIPLY AND ADD (short BFP) (MAEBR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MAE, 0xff00000000ff0000, 0xed000000002e0000, // MULTIPLY AND ADD (short HFP) (MAE R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MAER, 0xffff000000000000, 0xb32e000000000000, // MULTIPLY AND ADD (short HFP) (MAER R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MAYH, 0xff00000000ff0000, 0xed000000003c0000, // MULTIPLY AND ADD UNNRM. (long to ext. high HFP) (MAYH R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MAYHR, 0xffff000000000000, 0xb33c000000000000, // MULTIPLY AND ADD UNNRM. (long to ext. high HFP) (MAYHR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MAYL, 0xff00000000ff0000, 0xed00000000380000, // MULTIPLY AND ADD UNNRM. (long to ext. low HFP) (MAYL R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MAYLR, 0xffff000000000000, 0xb338000000000000, // MULTIPLY AND ADD UNNRM. (long to ext. low HFP) (MAYLR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MSDB, 0xff00000000ff0000, 0xed000000001f0000, // MULTIPLY AND SUBTRACT (long BFP) (MSDB R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSDBR, 0xffff000000000000, 0xb31f000000000000, // MULTIPLY AND SUBTRACT (long BFP) (MSDBR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MSD, 0xff00000000ff0000, 0xed000000003f0000, // MULTIPLY AND SUBTRACT (long HFP) (MSD R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSDR, 0xffff000000000000, 0xb33f000000000000, // MULTIPLY AND SUBTRACT (long HFP) (MSDR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MSEB, 0xff00000000ff0000, 0xed000000000f0000, // MULTIPLY AND SUBTRACT (short BFP) (MSEB R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSEBR, 0xffff000000000000, 0xb30f000000000000, // MULTIPLY AND SUBTRACT (short BFP) (MSEBR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MSE, 0xff00000000ff0000, 0xed000000002f0000, // MULTIPLY AND SUBTRACT (short HFP) (MSE R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSER, 0xffff000000000000, 0xb32f000000000000, // MULTIPLY AND SUBTRACT (short HFP) (MSER R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MP, 0xff00000000000000, 0xfc00000000000000, // MULTIPLY DECIMAL (MP D1(L1,B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_12_15, ap_BaseReg_32_35}},
	{MH, 0xff00000000000000, 0x4c00000000000000, // MULTIPLY HALFWORD (32←16) (MH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MHY, 0xff00000000ff0000, 0xe3000000007c0000, // MULTIPLY HALFWORD (32←16) (MHY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MGH, 0xff00000000ff0000, 0xe3000000003c0000, // MULTIPLY HALFWORD (64→16) (MGH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MHI, 0xff0f000000000000, 0xa70c000000000000, // MULTIPLY HALFWORD IMMEDIATE (32→16) (MHI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{MGHI, 0xff0f000000000000, 0xa70d000000000000, // MULTIPLY HALFWORD IMMEDIATE (64→16) (MGHI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{MLG, 0xff00000000ff0000, 0xe300000000860000, // MULTIPLY LOGICAL (128→64) (MLG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MLGR, 0xffff000000000000, 0xb986000000000000, // MULTIPLY LOGICAL (128→64) (MLGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{ML, 0xff00000000ff0000, 0xe300000000960000, // MULTIPLY LOGICAL (64←32) (ML R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MLR, 0xffff000000000000, 0xb996000000000000, // MULTIPLY LOGICAL (64←32) (MLR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{MS, 0xff00000000000000, 0x7100000000000000, // MULTIPLY SINGLE (32) (MS R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSC, 0xff00000000ff0000, 0xe300000000530000, // MULTIPLY SINGLE (32) (MSC R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSR, 0xffff000000000000, 0xb252000000000000, // MULTIPLY SINGLE (32) (MSR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{MSRKC, 0xffff000000000000, 0xb9fd000000000000, // MULTIPLY SINGLE (32) (MSRKC R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{MSY, 0xff00000000ff0000, 0xe300000000510000, // MULTIPLY SINGLE (32) (MSY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSG, 0xff00000000ff0000, 0xe3000000000c0000, // MULTIPLY SINGLE (64) (MSG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSGC, 0xff00000000ff0000, 0xe300000000830000, // MULTIPLY SINGLE (64) (MSGC R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSGR, 0xffff000000000000, 0xb90c000000000000, // MULTIPLY SINGLE (64) (MSGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{MSGRKC, 0xffff000000000000, 0xb9ed000000000000, // MULTIPLY SINGLE (64) (MSGRKC R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{MSGF, 0xff00000000ff0000, 0xe3000000001c0000, // MULTIPLY SINGLE (64←32) (MSGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MSGFR, 0xffff000000000000, 0xb91c000000000000, // MULTIPLY SINGLE (64←32) (MSGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{MSFI, 0xff0f000000000000, 0xc201000000000000, // MULTIPLY SINGLE IMMEDIATE (32) (MSFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{MSGFI, 0xff00000000000000, 0xc200000000000000, // MULTIPLY SINGLE IMMEDIATE (64←32) (MSGFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{MYH, 0xff00000000ff0000, 0xed000000003d0000, // MULTIPLY UNNORM. (long to ext. high HFP) (MYH R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MYHR, 0xffff000000000000, 0xb33d000000000000, // MULTIPLY UNNORM. (long to ext. high HFP) (MYHR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MYL, 0xff00000000ff0000, 0xed00000000390000, // MULTIPLY UNNORM. (long to ext. low HFP) (MYL R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MYLR, 0xffff000000000000, 0xb339000000000000, // MULTIPLY UNNORM. (long to ext. low HFP) (MYLR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{MY, 0xff00000000ff0000, 0xed000000003b0000, // MULTIPLY UNNORMALIZED (long to ext. HFP) (MY R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{MYR, 0xffff000000000000, 0xb33b000000000000, // MULTIPLY UNNORMALIZED (long to ext. HFP) (MYR R1,R3,R2)
		[7]*argField{ap_FPReg_16_19, ap_FPReg_24_27, ap_FPReg_28_31}},
	{NNRK, 0xffff000000000000, 0xb974000000000000, // NAND (32) (NNRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{NNGRK, 0xffff000000000000, 0xb964000000000000, // NAND (64) (NNGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{NNPA, 0xffff000000000000, 0xb93b000000000000, // NEURAL NETWORK PROCESSING ASSIST (NNPA R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{NIAI, 0xffff000000000000, 0xb2fa000000000000, // NEXT INSTRUCTION ACCESS INTENT (NIAI I1,I2)
		[7]*argField{ap_ImmUnsigned_24_27, ap_ImmUnsigned_28_31}},
	{NTSTG, 0xff00000000ff0000, 0xe300000000250000, // NONTRANSACTIONAL STORE (64) (NTSTG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{NORK, 0xffff000000000000, 0xb976000000000000, // NOR (32) (NORK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{NOGRK, 0xffff000000000000, 0xb966000000000000, // NOR (64) (NOGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{NXRK, 0xffff000000000000, 0xb977000000000000, // NOT EXCLUSIVE OR (32) (NXRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{NXGRK, 0xffff000000000000, 0xb967000000000000, // NOT EXCLUSIVE OR (64) (NXGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{O, 0xff00000000000000, 0x5600000000000000, // OR (32) (O R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{OR, 0xff00000000000000, 0x1600000000000000, // OR (32) (OR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{ORK, 0xffff000000000000, 0xb9f6000000000000, // OR (32) (ORK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{OY, 0xff00000000ff0000, 0xe300000000560000, // OR (32) (OY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{OG, 0xff00000000ff0000, 0xe300000000810000, // OR (64) (OG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{OGR, 0xffff000000000000, 0xb981000000000000, // OR (64) (OGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{OGRK, 0xffff000000000000, 0xb9e6000000000000, // OR (64) (OGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{OC, 0xff00000000000000, 0xd600000000000000, // OR (character) (OC D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{OI, 0xff00000000000000, 0x9600000000000000, // OR (immediate) (OI D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{OIY, 0xff00000000ff0000, 0xeb00000000560000, // OR (immediate) (OIY D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{OIHH, 0xff0f000000000000, 0xa508000000000000, // OR IMMEDIATE (high high) (OIHH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{OIHL, 0xff0f000000000000, 0xa509000000000000, // OR IMMEDIATE (high low) (OIHL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{OIHF, 0xff0f000000000000, 0xc00c000000000000, // OR IMMEDIATE (high) (OIHF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{OILH, 0xff0f000000000000, 0xa50a000000000000, // OR IMMEDIATE (low high) (OILH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{OILL, 0xff0f000000000000, 0xa50b000000000000, // OR IMMEDIATE (low low) (OILL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{OILF, 0xff0f000000000000, 0xc00d000000000000, // OR IMMEDIATE (low) (OILF R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{OCRK, 0xffff000000000000, 0xb975000000000000, // OR WITH COMPLEMENT (32) (OCRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{OCGRK, 0xffff000000000000, 0xb965000000000000, // OR WITH COMPLEMENT (64) (OCGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{PACK, 0xff00000000000000, 0xf200000000000000, // PACK (PACK D1(L1,B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_12_15, ap_BaseReg_32_35}},
	{PKA, 0xff00000000000000, 0xe900000000000000, // PACK ASCII (PKA D1(B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_8_15, ap_BaseReg_32_35}},
	{PKU, 0xff00000000000000, 0xe100000000000000, // PACK UNICODE (PKU D1(B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_8_15, ap_BaseReg_32_35}},
	{PGIN, 0xffff000000000000, 0xb22e000000000000, // PAGE IN (PGIN R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PGOUT, 0xffff000000000000, 0xb22f000000000000, // PAGE OUT (PGOUT R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PCC, 0xffff000000000000, 0xb92c000000000000, // PERFORM CRYPTOGRAPHIC COMPUTATION (PCC R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PCKMO, 0xffff000000000000, 0xb928000000000000, // PERFORM CRYPTOGRAPHIC KEY MGMT. OPERATIONS (PCKMO R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PFPO, 0xffff000000000000, 0x10a000000000000, // PERFORM FLOATING-POINT OPERATION (PFPO)
		[7]*argField{}},
	{PFMF, 0xffff000000000000, 0xb9af000000000000, // PERFORM FRAME MANAGEMENT FUNCTION (PFMF R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PLO, 0xff00000000000000, 0xee00000000000000, // PERFORM LOCKED OPERATION (PLO R1,D2(B2),R3,D4(B4))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_Reg_12_15, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{PPA, 0xffff000000000000, 0xb2e8000000000000, // PERFORM PROCESSOR ASSIST (PPA R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{PPNO, 0xffff000000000000, 0xb93c000000000000, // PERFORM RANDOM NUMBER OPERATION (PPNO R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PRNO, 0xffff000000000000, 0xb93c000000000000, // PERFORM RANDOM NUMBER OPERATION (PRNO R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PTFF, 0xffff000000000000, 0x104000000000000, // PERFORM TIMING FACILITY FUNCTION (PTFF)
		[7]*argField{}},
	{PTF, 0xffff000000000000, 0xb9a2000000000000, // PERFORM TOPOLOGY FUNCTION (PTF R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{POPCNT, 0xffff000000000000, 0xb9e1000000000000, // POPULATION COUNT (POPCNT R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{PFD, 0xff00000000ff0000, 0xe300000000360000, // PREFETCH DATA (PFD M1,D2(X2,B2))
		[7]*argField{ap_Mask_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{PFDRL, 0xff0f000000000000, 0xc602000000000000, // PREFETCH DATA RELATIVE LONG (PFDRL M1,RI2)
		[7]*argField{ap_Mask_8_11, ap_RegImSigned32_16_47}},
	{PC, 0xffff000000000000, 0xb218000000000000, // PROGRAM CALL (PC D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{PR, 0xffff000000000000, 0x101000000000000, // PROGRAM RETURN (PR)
		[7]*argField{}},
	{PT, 0xffff000000000000, 0xb228000000000000, // PROGRAM TRANSFER (PT R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PTI, 0xffff000000000000, 0xb99e000000000000, // PROGRAM TRANSFER WITH INSTANCE (PTI R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PALB, 0xffff000000000000, 0xb248000000000000, // PURGE ALB (PALB R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{PTLB, 0xffff000000000000, 0xb20d000000000000, // PURGE TLB (PTLB D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{QAXTR, 0xffff000000000000, 0xb3fd000000000000, // QUANTIZE (extended DFP) (QAXTR R1,R3,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_16_19, ap_FPReg_28_31}},
	{QADTR, 0xffff000000000000, 0xb3f5000000000000, // QUANTIZE (long DFP) (QADTR R1,R3,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_16_19, ap_FPReg_28_31}},
	{QPACI, 0xffff000000000000, 0xb28f000000000000, // QUERY PROCESSOR ACTIVITY COUNTER INFORMATION (QPACI D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{RRXTR, 0xffff000000000000, 0xb3ff000000000000, // REROUND (extended DFP) (RRXTR R1,R3,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_16_19, ap_FPReg_28_31}},
	{RRDTR, 0xffff000000000000, 0xb3f7000000000000, // REROUND (long DFP) (RRDTR R1,R3,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_16_19, ap_FPReg_28_31}},
	{RCHP, 0xffff000000000000, 0xb23b000000000000, // RESET CHANNEL PATH (RCHP)
		[7]*argField{}},
	{RDP, 0xffff000000000000, 0xb98b000000000000, // RESET DAT PROTECTION (RDP R1,R3,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_16_19, ap_Reg_28_31}},
	{RRBE, 0xffff000000000000, 0xb22a000000000000, // RESET REFERENCE BIT EXTENDED (RRBE R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{RRBM, 0xffff000000000000, 0xb9ae000000000000, // RESET REFERENCE BITS MULTIPLE (RRBM R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{RP, 0xffff000000000000, 0xb277000000000000, // RESUME PROGRAM (RP D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{RSCH, 0xffff000000000000, 0xb238000000000000, // RESUME SUBCHANNEL (RSCH)
		[7]*argField{}},
	{RLL, 0xff00000000ff0000, 0xeb000000001d0000, // ROTATE LEFT SINGLE LOGICAL (32) (RLL R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{RLLG, 0xff00000000ff0000, 0xeb000000001c0000, // ROTATE LEFT SINGLE LOGICAL (64) (RLLG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{RNSBG, 0xff00000000ff0000, 0xec00000000540000, // ROTATE THEN AND SELECTED BITS (64) (RNSBG R1,R2,I3,I4[,I5])
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmUnsigned_16_23, ap_ImmUnsigned_24_31, ap_ImmUnsigned_32_39}},
	{RXSBG, 0xff00000000ff0000, 0xec00000000570000, // ROTATETHENEXCLUSIVEORSELECT.BITS(64) (RXSBG R1,R2,I3,I4[,I5])
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmUnsigned_16_23, ap_ImmUnsigned_24_31, ap_ImmUnsigned_32_39}},
	{RISBG, 0xff00000000ff0000, 0xec00000000550000, // ROTATE THEN INSERT SELECTED BITS (64) (RISBG R1,R2,I3,I4[,I5])
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmUnsigned_16_23, ap_ImmUnsigned_24_31, ap_ImmUnsigned_32_39}},
	{RISBGN, 0xff00000000ff0000, 0xec00000000590000, // ROTATE THEN INSERT SELECTED BITS (64) (RISBGN R1,R2,I3,I4[,I5])
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmUnsigned_16_23, ap_ImmUnsigned_24_31, ap_ImmUnsigned_32_39}},
	{RISBHG, 0xff00000000ff0000, 0xec000000005d0000, // ROTATE THEN INSERT SELECTED BITS HIGH(64) (RISBHG R1,R2,I3,I4[,I5])
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmUnsigned_16_23, ap_ImmUnsigned_24_31, ap_ImmUnsigned_32_39}},
	{RISBLG, 0xff00000000ff0000, 0xec00000000510000, // ROTATE THEN INSERT SELECTED BITS LOW (64) (RISBLG R1,R2,I3,I4[,I5])
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmUnsigned_16_23, ap_ImmUnsigned_24_31, ap_ImmUnsigned_32_39}},
	{ROSBG, 0xff00000000ff0000, 0xec00000000560000, // ROTATE THEN OR SELECTED BITS (64) (ROSBG R1,R2,I3,I4[,I5])
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_ImmUnsigned_16_23, ap_ImmUnsigned_24_31, ap_ImmUnsigned_32_39}},
	{SRST, 0xffff000000000000, 0xb25e000000000000, // SEARCH STRING (SRST R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SRSTU, 0xffff000000000000, 0xb9be000000000000, // SEARCH STRING UNICODE (SRSTU R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SELR, 0xffff000000000000, 0xb9f0000000000000, // SELECT (32) (SELR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SELGR, 0xffff000000000000, 0xb9e3000000000000, // SELECT (64) (SELGR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SELFHR, 0xffff000000000000, 0xb9c0000000000000, // SELECT HIGH (32) (SELFHR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SAR, 0xffff000000000000, 0xb24e000000000000, // SET ACCESS (SAR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SAL, 0xffff000000000000, 0xb237000000000000, // SET ADDRESS LIMIT (SAL)
		[7]*argField{}},
	{SAC, 0xffff000000000000, 0xb219000000000000, // SET ADDRESS SPACE CONTROL (SAC D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SACF, 0xffff000000000000, 0xb279000000000000, // SET ADDRESS SPACE CONTROL FAST (SACF D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SAM24, 0xffff000000000000, 0x10c000000000000, // SET ADDRESSING MODE (24) (SAM24)
		[7]*argField{}},
	{SAM31, 0xffff000000000000, 0x10d000000000000, // SET ADDRESSING MODE (31) (SAM31)
		[7]*argField{}},
	{SAM64, 0xffff000000000000, 0x10e000000000000, // SET ADDRESSING MODE (64) (SAM64)
		[7]*argField{}},
	{SRNM, 0xffff000000000000, 0xb299000000000000, // SET BFP ROUNDING MODE (2 bit) (SRNM D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SRNMB, 0xffff000000000000, 0xb2b8000000000000, // SET BFP ROUNDING MODE (3 bit) (SRNMB D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SCHM, 0xffff000000000000, 0xb23c000000000000, // SET CHANNEL MONITOR (SCHM)
		[7]*argField{}},
	{SCK, 0xffff000000000000, 0xb204000000000000, // SET CLOCK (SCK D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SCKC, 0xffff000000000000, 0xb206000000000000, // SET CLOCK COMPARATOR (SCKC D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SCKPF, 0xffff000000000000, 0x107000000000000, // SET CLOCK PROGRAMMABLE FIELD (SCKPF)
		[7]*argField{}},
	{SPT, 0xffff000000000000, 0xb208000000000000, // SET CPU TIMER (SPT D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SRNMT, 0xffff000000000000, 0xb2b9000000000000, // SET DFP ROUNDING MODE (SRNMT D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SFPC, 0xffff000000000000, 0xb384000000000000, // SET FPC (SFPC R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SFASR, 0xffff000000000000, 0xb385000000000000, // SET FPC AND SIGNAL (SFASR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SPX, 0xffff000000000000, 0xb210000000000000, // SET PREFIX (SPX D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SPM, 0xff00000000000000, 0x400000000000000, // SET PROGRAM MASK (SPM R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{SPKA, 0xffff000000000000, 0xb20a000000000000, // SET PSW KEY FROM ADDRESS (SPKA D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SSAR, 0xffff000000000000, 0xb225000000000000, // SET SECONDARY ASN (SSAR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SSAIR, 0xffff000000000000, 0xb99f000000000000, // SET SECONDARY ASN WITH INSTANCE (SSAIR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SSKE, 0xffff000000000000, 0xb22b000000000000, // SET STORAGE KEY EXTENDED (SSKE R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{SSM, 0xff00000000000000, 0x8000000000000000, // SET SYSTEM MASK (SSM D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{SRP, 0xff00000000000000, 0xf000000000000000, // SHIFT AND ROUND DECIMAL (SRP D1(L1,B1),D2(B2),I3)
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35, ap_ImmUnsigned_12_15}},
	{SLDA, 0xff00000000000000, 0x8f00000000000000, // SHIFT LEFT DOUBLE (64) (SLDA R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SLDL, 0xff00000000000000, 0x8d00000000000000, // SHIFT LEFT DOUBLE LOGICAL (64) (SLDL R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SLA, 0xff00000000000000, 0x8b00000000000000, // SHIFT LEFT SINGLE (32) (SLA R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SLAK, 0xff00000000ff0000, 0xeb00000000dd0000, // SHIFT LEFT SINGLE (32) (SLAK R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{SLAG, 0xff00000000ff0000, 0xeb000000000b0000, // SHIFT LEFT SINGLE (64) (SLAG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{SLL, 0xff00000000000000, 0x8900000000000000, // SHIFT LEFT SINGLE LOGICAL (32) (SLL R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SLLK, 0xff00000000ff0000, 0xeb00000000df0000, // SHIFT LEFT SINGLE LOGICAL (32) (SLLK R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{SLLG, 0xff00000000ff0000, 0xeb000000000d0000, // SHIFT LEFT SINGLE LOGICAL (64) (SLLG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{SRDA, 0xff00000000000000, 0x8e00000000000000, // SHIFT RIGHT DOUBLE (64) (SRDA R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SRDL, 0xff00000000000000, 0x8c00000000000000, // SHIFT RIGHT DOUBLE LOGICAL (64) (SRDL R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SRA, 0xff00000000000000, 0x8a00000000000000, // SHIFT RIGHT SINGLE (32) (SRA R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SRAK, 0xff00000000ff0000, 0xeb00000000dc0000, // SHIFT RIGHT SINGLE (32) (SRAK R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{SRAG, 0xff00000000ff0000, 0xeb000000000a0000, // SHIFT RIGHT SINGLE (64) (SRAG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{SRL, 0xff00000000000000, 0x8800000000000000, // SHIFT RIGHT SINGLE LOGICAL (32) (SRL R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SRLK, 0xff00000000ff0000, 0xeb00000000de0000, // SHIFT RIGHT SINGLE LOGICAL (32) (SRLK R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{SRLG, 0xff00000000ff0000, 0xeb000000000c0000, // SHIFT RIGHT SINGLE LOGICAL (64) (SRLG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{SLXT, 0xff00000000ff0000, 0xed00000000480000, // SHIFT SIGNIFICAND LEFT (extended DFP) (SLXT R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SLDT, 0xff00000000ff0000, 0xed00000000400000, // SHIFT SIGNIFICAND LEFT (long DFP) (SLDT R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SRXT, 0xff00000000ff0000, 0xed00000000490000, // SHIFT SIGNIFICAND RIGHT (extended DFP) (SRXT R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SRDT, 0xff00000000ff0000, 0xed00000000410000, // SHIFT SIGNIFICAND RIGHT (long DFP) (SRDT R1,R3,D2(X2,B2))
		[7]*argField{ap_FPReg_32_35, ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SIGP, 0xff00000000000000, 0xae00000000000000, // SIGNAL PROCESSOR (SIGP R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{SORTL, 0xffff000000000000, 0xb938000000000000, // SORT LISTS (SORTL R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SQXBR, 0xffff000000000000, 0xb316000000000000, // SQUARE ROOT (extended BFP) (SQXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SQXR, 0xffff000000000000, 0xb336000000000000, // SQUARE ROOT (extended HFP) (SQXR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SQDB, 0xff00000000ff0000, 0xed00000000150000, // SQUARE ROOT (long BFP) (SQDB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{SQDBR, 0xffff000000000000, 0xb315000000000000, // SQUARE ROOT (long BFP) (SQDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SQD, 0xff00000000ff0000, 0xed00000000350000, // SQUARE ROOT (long HFP) (SQD R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{SQDR, 0xffff000000000000, 0xb244000000000000, // SQUARE ROOT (long HFP) (SQDR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SQEB, 0xff00000000ff0000, 0xed00000000140000, // SQUARE ROOT (short BFP) (SQEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{SQEBR, 0xffff000000000000, 0xb314000000000000, // SQUARE ROOT (short BFP) (SQEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SQE, 0xff00000000ff0000, 0xed00000000340000, // SQUARE ROOT (short HFP) (SQE R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{SQER, 0xffff000000000000, 0xb245000000000000, // SQUARE ROOT (short HFP) (SQER R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SSCH, 0xffff000000000000, 0xb233000000000000, // START SUBCHANNEL (SSCH D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{ST, 0xff00000000000000, 0x5000000000000000, // STORE (32) (ST R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STY, 0xff00000000ff0000, 0xe300000000500000, // STORE (32) (STY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STG, 0xff00000000ff0000, 0xe300000000240000, // STORE (64) (STG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STD, 0xff00000000000000, 0x6000000000000000, // STORE (long) (STD R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STDY, 0xff00000000ff0000, 0xed00000000670000, // STORE (long) (STDY R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STE, 0xff00000000000000, 0x7000000000000000, // STORE (short) (STE R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STEY, 0xff00000000ff0000, 0xed00000000660000, // STORE (short) (STEY R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STAM, 0xff00000000000000, 0x9b00000000000000, // STORE ACCESS MULTIPLE 7-389 (STAM R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STAMY, 0xff00000000ff0000, 0xeb000000009b0000, // STORE ACCESS MULTIPLE 7-389 (STAMY R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STBEAR, 0xffff000000000000, 0xb201000000000000, // STORE BEAR (STBEAR D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STCPS, 0xffff000000000000, 0xb23a000000000000, // STORE CHANNEL PATH STATUS (STCPS D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STCRW, 0xffff000000000000, 0xb239000000000000, // STORE CHANNEL REPORT WORD (STCRW D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STC, 0xff00000000000000, 0x4200000000000000, // STORE CHARACTER (STC R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STCY, 0xff00000000ff0000, 0xe300000000720000, // STORE CHARACTER (STCY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STCH, 0xff00000000ff0000, 0xe300000000c30000, // STORE CHARACTER HIGH (8) (STCH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STCMH, 0xff00000000ff0000, 0xeb000000002c0000, // STORE CHARACTERS UNDER MASK (high) (STCMH R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STCM, 0xff00000000000000, 0xbe00000000000000, // STORE CHARACTERS UNDER MASK (low) (STCM R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STCMY, 0xff00000000ff0000, 0xeb000000002d0000, // STORE CHARACTERS UNDER MASK (low) (STCMY R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STCK, 0xffff000000000000, 0xb205000000000000, // STORE CLOCK (STCK D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STCKC, 0xffff000000000000, 0xb207000000000000, // STORE CLOCK COMPARATOR (STCKC D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STCKE, 0xffff000000000000, 0xb278000000000000, // STORE CLOCK EXTENDED (STCKE D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STCKF, 0xffff000000000000, 0xb27c000000000000, // STORE CLOCK FAST (STCKF D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STCTL, 0xff00000000000000, 0xb600000000000000, // STORE CONTROL (32) (STCTL R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STCTG, 0xff00000000ff0000, 0xeb00000000250000, // STORE CONTROL (64) (STCTG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STAP, 0xffff000000000000, 0xb212000000000000, // STORE CPU ADDRESS (STAP D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STIDP, 0xffff000000000000, 0xb202000000000000, // STORE CPU ID (STIDP D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STPT, 0xffff000000000000, 0xb209000000000000, // STORE CPU TIMER (STPT D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STFL, 0xffff000000000000, 0xb2b1000000000000, // STORE FACILITY LIST (STFL D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STFLE, 0xffff000000000000, 0xb2b0000000000000, // STORE FACILITY LIST EXTENDED (STFLE D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STFPC, 0xffff000000000000, 0xb29c000000000000, // STORE FPC (STFPC D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STGSC, 0xff00000000ff0000, 0xe300000000490000, // STORE GUARDED STORAGE CONTROLS (STGSC R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STH, 0xff00000000000000, 0x4000000000000000, // STORE HALFWORD (16) (STH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STHY, 0xff00000000ff0000, 0xe300000000700000, // STORE HALFWORD (16) (STHY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STHH, 0xff00000000ff0000, 0xe300000000c70000, // STORE HALFWORD HIGH (16) (STHH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STHRL, 0xff0f000000000000, 0xc407000000000000, // STORE HALFWORD RELATIVE LONG (16) (STHRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{STFH, 0xff00000000ff0000, 0xe300000000cb0000, // STORE HIGH (32) (STFH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STOCFH, 0xff00000000ff0000, 0xeb00000000e10000, // STORE HIGH ON CONDITION (STOCFH R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STM, 0xff00000000000000, 0x9000000000000000, // STORE MULTIPLE (32) (STM R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STMY, 0xff00000000ff0000, 0xeb00000000900000, // STORE MULTIPLE (32) (STMY R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STMG, 0xff00000000ff0000, 0xeb00000000240000, // STORE MULTIPLE (64) (STMG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STMH, 0xff00000000ff0000, 0xeb00000000260000, // STORE MULTIPLE HIGH (32) (STMH R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STOC, 0xff00000000ff0000, 0xeb00000000f30000, // STORE ON CONDITION (32) (STOC R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STOCG, 0xff00000000ff0000, 0xeb00000000e30000, // STORE ON CONDITION (64) (STOCG R1,M3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Mask_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{STPQ, 0xff00000000ff0000, 0xe3000000008e0000, // STORE PAIR TO QUADWORD (STPQ R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STPX, 0xffff000000000000, 0xb211000000000000, // STORE PREFIX (STPX D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STRAG, 0xffff000000000000, 0xe502000000000000, // STORE REAL ADDRESS (STRAG D1(B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{STRL, 0xff0f000000000000, 0xc40f000000000000, // STORE RELATIVE LONG (32) (STRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{STGRL, 0xff0f000000000000, 0xc40b000000000000, // STORE RELATIVE LONG (64) (STGRL R1,RI2)
		[7]*argField{ap_Reg_8_11, ap_RegImSigned32_16_47}},
	{STRVH, 0xff00000000ff0000, 0xe3000000003f0000, // STORE REVERSED (16) (STRVH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STRV, 0xff00000000ff0000, 0xe3000000003e0000, // STORE REVERSED (32) (STRV R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STRVG, 0xff00000000ff0000, 0xe3000000002f0000, // STORE REVERSED (64) (STRVG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{STSCH, 0xffff000000000000, 0xb234000000000000, // STORE SUBCHANNEL (STSCH D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STSI, 0xffff000000000000, 0xb27d000000000000, // STORE SYSTEM INFORMATION (STSI D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{STNSM, 0xff00000000000000, 0xac00000000000000, // STORE THEN AND SYSTEM MASK (STNSM D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{STOSM, 0xff00000000000000, 0xad00000000000000, // STORE THEN OR SYSTEM MASK (STOSM D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{STURA, 0xffff000000000000, 0xb246000000000000, // STORE USING REAL ADDRESS (32) (STURA R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{STURG, 0xffff000000000000, 0xb925000000000000, // STORE USING REAL ADDRESS (64) (STURG R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{S, 0xff00000000000000, 0x5b00000000000000, // SUBTRACT (32) (S R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SR, 0xff00000000000000, 0x1b00000000000000, // SUBTRACT (32) (SR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{SRK, 0xffff000000000000, 0xb9f9000000000000, // SUBTRACT (32) (SRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SY, 0xff00000000ff0000, 0xe3000000005b0000, // SUBTRACT (32) (SY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SG, 0xff00000000ff0000, 0xe300000000090000, // SUBTRACT (64) (SG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SGR, 0xffff000000000000, 0xb909000000000000, // SUBTRACT (64) (SGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SGRK, 0xffff000000000000, 0xb9e9000000000000, // SUBTRACT (64) (SGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SGF, 0xff00000000ff0000, 0xe300000000190000, // SUBTRACT (64←32) (SGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SGFR, 0xffff000000000000, 0xb919000000000000, // SUBTRACT (64→32) (SGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SXBR, 0xffff000000000000, 0xb34b000000000000, // SUBTRACT (extended BFP) (SXBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SXTR, 0xffff000000000000, 0xb3db000000000000, // SUBTRACT (extended DFP) (SXTR R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{SXTRA, 0xffff000000000000, 0xb3db000000000000, // SUBTRACT (extended DFP) (SXTRA R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{SDB, 0xff00000000ff0000, 0xed000000001b0000, // SUBTRACT (long BFP) (SDB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{SDBR, 0xffff000000000000, 0xb31b000000000000, // SUBTRACT (long BFP) (SDBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SDTR, 0xffff000000000000, 0xb3d3000000000000, // SUBTRACT (long DFP) (SDTR R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{SDTRA, 0xffff000000000000, 0xb3d3000000000000, // SUBTRACT (long DFP) (SDTRA R1,R2,R3)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31, ap_FPReg_16_19}},
	{SEB, 0xff00000000ff0000, 0xed000000000b0000, // SUBTRACT (short BFP) (SEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{SEBR, 0xffff000000000000, 0xb30b000000000000, // SUBTRACT (short BFP) (SEBR R1,R2)
		[7]*argField{ap_FPReg_24_27, ap_FPReg_28_31}},
	{SP, 0xff00000000000000, 0xfb00000000000000, // SUBTRACT DECIMAL (SP D1(L1,B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_12_15, ap_BaseReg_32_35}},
	{SH, 0xff00000000000000, 0x4b00000000000000, // SUBTRACT HALFWORD (32←16) (SH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SHY, 0xff00000000ff0000, 0xe3000000007b0000, // SUBTRACT HALFWORD (32→16) (SHY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SGH, 0xff00000000ff0000, 0xe300000000390000, // SUBTRACT HALFWORD (64→16) (SGH R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SHHHR, 0xffff000000000000, 0xb9c9000000000000, // SUBTRACT HIGH (32) (SHHHR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SHHLR, 0xffff000000000000, 0xb9d9000000000000, // SUBTRACT HIGH (32) (SHHLR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SL, 0xff00000000000000, 0x5f00000000000000, // SUBTRACT LOGICAL (32) (SL R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SLR, 0xff00000000000000, 0x1f00000000000000, // SUBTRACT LOGICAL (32) (SLR R1,R2)
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15}},
	{SLRK, 0xffff000000000000, 0xb9fb000000000000, // SUBTRACT LOGICAL (32) (SLRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SLY, 0xff00000000ff0000, 0xe3000000005f0000, // SUBTRACT LOGICAL (32) (SLY R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SLG, 0xff00000000ff0000, 0xe3000000000b0000, // SUBTRACT LOGICAL (64) (SLG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SLGR, 0xffff000000000000, 0xb90b000000000000, // SUBTRACT LOGICAL (64) (SLGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SLGRK, 0xffff000000000000, 0xb9eb000000000000, // SUBTRACT LOGICAL (64) (SLGRK R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SLGF, 0xff00000000ff0000, 0xe3000000001b0000, // SUBTRACT LOGICAL (64←32) (SLGF R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SLGFR, 0xffff000000000000, 0xb91b000000000000, // SUBTRACT LOGICAL (64←32) (SLGFR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SLHHHR, 0xffff000000000000, 0xb9cb000000000000, // SUBTRACT LOGICAL HIGH (32) (SLHHHR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SLHHLR, 0xffff000000000000, 0xb9db000000000000, // SUBTRACT LOGICAL HIGH (32) (SLHHLR R1,R2,R3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Reg_16_19}},
	{SLFI, 0xff0f000000000000, 0xc205000000000000, // SUBTRACT LOGICAL IMMEDIATE (32) (SLFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{SLGFI, 0xff0f000000000000, 0xc204000000000000, // SUBTRACT LOGICAL IMMEDIATE (64→32) (SLGFI R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_47}},
	{SLB, 0xff00000000ff0000, 0xe300000000990000, // SUBTRACT LOGICAL WITH BORROW (32) (SLB R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SLBR, 0xffff000000000000, 0xb999000000000000, // SUBTRACT LOGICAL WITH BORROW (32) (SLBR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SLBG, 0xff00000000ff0000, 0xe300000000890000, // SUBTRACT LOGICAL WITH BORROW (64) (SLBG R1,D2(X2,B2))
		[7]*argField{ap_Reg_8_11, ap_DispSigned20_20_39, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SLBGR, 0xffff000000000000, 0xb989000000000000, // SUBTRACT LOGICAL WITH BORROW (64) (SLBGR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{SXR, 0xff00000000000000, 0x3700000000000000, // SUBTRACT NORMALIZED (extended HFP) (SXR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{SD, 0xff00000000000000, 0x6b00000000000000, // SUBTRACT NORMALIZED (long HFP) (SD R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SDR, 0xff00000000000000, 0x2b00000000000000, // SUBTRACT NORMALIZED (long HFP) (SDR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{SE, 0xff00000000000000, 0x7b00000000000000, // SUBTRACT NORMALIZED (short HFP) (SE R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SER, 0xff00000000000000, 0x3b00000000000000, // SUBTRACT NORMALIZED (short HFP) (SER R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{SW, 0xff00000000000000, 0x6f00000000000000, // SUBTRACT UNNORMALIZED (long HFP) (SW R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SWR, 0xff00000000000000, 0x2f00000000000000, // SUBTRACT UNNORMALIZED (long HFP) (SWR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{SU, 0xff00000000000000, 0x7f00000000000000, // SUBTRACT UNNORMALIZED (short HFP) (SU R1,D2(X2,B2))
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19}},
	{SUR, 0xff00000000000000, 0x3f00000000000000, // SUBTRACT UNNORMALIZED (short HFP) (SUR R1,R2)
		[7]*argField{ap_FPReg_8_11, ap_FPReg_12_15}},
	{SVC, 0xff00000000000000, 0xa00000000000000, // SUPERVISOR CALL (SVC I)
		[7]*argField{ap_ImmUnsigned_8_15}},
	{TAR, 0xffff000000000000, 0xb24c000000000000, // TEST ACCESS (TAR R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{TAM, 0xffff000000000000, 0x10b000000000000, // TEST ADDRESSING MODE (TAM)
		[7]*argField{}},
	{TS, 0xff00000000000000, 0x9300000000000000, // TEST AND SET (TS D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{TB, 0xffff000000000000, 0xb22c000000000000, // TEST BLOCK (TB R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{TCXB, 0xff00000000ff0000, 0xed00000000120000, // TEST DATA CLASS (extended BFP) (TCXB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{TDCXT, 0xff00000000ff0000, 0xed00000000580000, // TEST DATA CLASS (extended DFP) (TDCXT R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{TCDB, 0xff00000000ff0000, 0xed00000000110000, // TEST DATA CLASS (long BFP) (TCDB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{TDCDT, 0xff00000000ff0000, 0xed00000000540000, // TEST DATA CLASS (long DFP) (TDCDT R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{TCEB, 0xff00000000ff0000, 0xed00000000100000, // TEST DATA CLASS (short BFP) (TCEB R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{TDCET, 0xff00000000ff0000, 0xed00000000500000, // TEST DATA CLASS (short DFP) (TDCET R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{TDGXT, 0xff00000000ff0000, 0xed00000000590000, // TEST DATA GROUP (extended DFP) (TDGXT R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{TDGDT, 0xff00000000ff0000, 0xed00000000550000, // TEST DATA GROUP (long DFP) (TDGDT R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{TDGET, 0xff00000000ff0000, 0xed00000000510000, // TEST DATA GROUP (short DFP) (TDGET R1,D2(X2,B2),M3)
		[7]*argField{ap_FPReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35}},
	{TP, 0xff00000000ff0000, 0xeb00000000c00000, // TEST DECIMAL (TP D1(L1,B1))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19}},
	{TPEI, 0xffff000000000000, 0xb9a1000000000000, // TEST PENDING EXTERNAL INTERRUPTION (TPEI R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{TPI, 0xffff000000000000, 0xb236000000000000, // TEST PENDING INTERRUPTION (TPI D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{TPROT, 0xffff000000000000, 0xe501000000000000, // TEST PROTECTION (TPROT D1(B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{TSCH, 0xffff000000000000, 0xb235000000000000, // TEST SUBCHANNEL (TSCH D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{TM, 0xff00000000000000, 0x9100000000000000, // TEST UNDER MASK (TM D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{TMY, 0xff00000000ff0000, 0xeb00000000510000, // TEST UNDER MASK (TMY D1(B1),I2)
		[7]*argField{ap_DispSigned20_20_39, ap_BaseReg_16_19, ap_ImmUnsigned_8_15}},
	{TMHH, 0xff0f000000000000, 0xa702000000000000, // TEST UNDER MASK (high high) (TMHH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{TMHL, 0xff0f000000000000, 0xa703000000000000, // TEST UNDER MASK (high low) (TMHL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{TMLH, 0xff00000000000000, 0xa700000000000000, // TEST UNDER MASK (low high) (TMLH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{TMLL, 0xff0f000000000000, 0xa701000000000000, // TEST UNDER MASK (low low) (TMLL R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{TMH, 0xff00000000000000, 0xa700000000000000, // TEST UNDER MASK HIGH (TMH R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{TML, 0xff0f000000000000, 0xa701000000000000, // TEST UNDER MASK LOW (TML R1,I2)
		[7]*argField{ap_Reg_8_11, ap_ImmUnsigned_16_31}},
	{TRACE, 0xff00000000000000, 0x9900000000000000, // TRACE (32) (TRACE R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{TRACG, 0xff00000000ff0000, 0xeb000000000f0000, // TRACE (64) (TRACG R1,R3,D2(B2))
		[7]*argField{ap_Reg_8_11, ap_Reg_12_15, ap_DispSigned20_20_39, ap_BaseReg_16_19}},
	{TABORT, 0xffff000000000000, 0xb2fc000000000000, // TRANSACTION ABORT (TABORT D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{TBEGINC, 0xffff000000000000, 0xe561000000000000, // TRANSACTION BEGIN (constrained) (TBEGINC D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_32_47}},
	{TBEGIN, 0xffff000000000000, 0xe560000000000000, // TRANSACTION BEGIN (nonconstrained) (TBEGIN D1(B1),I2)
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_32_47}},
	{TEND, 0xffff000000000000, 0xb2f8000000000000, // TRANSACTION END (TEND D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{TR, 0xff00000000000000, 0xdc00000000000000, // TRANSLATE (TR D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{TRT, 0xff00000000000000, 0xdd00000000000000, // TRANSLATE AND TEST (TRT D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{TRTE, 0xffff000000000000, 0xb9bf000000000000, // TRANSLATE AND TEST EXTENDED (TRTE R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{TRTR, 0xff00000000000000, 0xd000000000000000, // TRANSLATE AND TEST REVERSE (TRTR D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{TRTRE, 0xffff000000000000, 0xb9bd000000000000, // TRANSLATE AND TEST REVERSE EXTENDED (TRTRE R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{TRE, 0xffff000000000000, 0xb2a5000000000000, // TRANSLATE EXTENDED (TRE R1,R2)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31}},
	{TROO, 0xffff000000000000, 0xb993000000000000, // TRANSLATE ONE TO ONE (TROO R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{TROT, 0xffff000000000000, 0xb992000000000000, // TRANSLATE ONE TO TWO (TROT R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{TRTO, 0xffff000000000000, 0xb991000000000000, // TRANSLATE TWO TO ONE (TRTO R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{TRTT, 0xffff000000000000, 0xb990000000000000, // TRANSLATE TWO TO TWO (TRTT R1,R2,M3)
		[7]*argField{ap_Reg_24_27, ap_Reg_28_31, ap_Mask_16_19}},
	{TRAP2, 0xffff000000000000, 0x1ff000000000000, // TRAP (TRAP2)
		[7]*argField{}},
	{TRAP4, 0xffff000000000000, 0xb2ff000000000000, // TRAP (TRAP4 D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_BaseReg_16_19}},
	{UNPK, 0xff00000000000000, 0xf300000000000000, // UNPACK (UNPK D1(L1,B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_12_15, ap_BaseReg_32_35}},
	{UNPKA, 0xff00000000000000, 0xea00000000000000, // UNPACK ASCII (UNPKA D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{UNPKU, 0xff00000000000000, 0xe200000000000000, // UNPACK UNICODE (UNPKU D1(L,B1),D2(B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_15, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_BaseReg_32_35}},
	{UPT, 0xffff000000000000, 0x102000000000000, // UPDATE TREE (UPT)
		[7]*argField{}},
	{VA, 0xff00000000ff0000, 0xe700000000f30000, // VECTOR ADD (VA V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VACC, 0xff00000000ff0000, 0xe700000000f10000, // VECTOR ADD COMPUTE CARRY (VACC V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VAP, 0xff00000000ff0000, 0xe600000000710000, // VECTOR ADD DECIMAL (VAP V1,V2,V3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VAC, 0xff00000000ff0000, 0xe700000000bb0000, // VECTOR ADD WITH CARRY (VAC V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VACCC, 0xff00000000ff0000, 0xe700000000b90000, // VECTOR ADD WITH CARRY COMPUTE CARRY (VACCC V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VN, 0xff00000000ff0000, 0xe700000000680000, // VECTOR AND (VN V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VNC, 0xff00000000ff0000, 0xe700000000690000, // VECTOR AND WITH COMPLEMENT (VNC V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VAVG, 0xff00000000ff0000, 0xe700000000f20000, // VECTOR AVERAGE (VAVG V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VAVGL, 0xff00000000ff0000, 0xe700000000f00000, // VECTOR AVERAGE LOGICAL (VAVGL V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VBPERM, 0xff00000000ff0000, 0xe700000000850000, // VECTOR BIT PERMUTE (VBPERM V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VCKSM, 0xff00000000ff0000, 0xe700000000660000, // VECTOR CHECKSUM (VCKSM V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VCP, 0xff00000000ff0000, 0xe600000000770000, // VECTOR COMPARE DECIMAL (VCP V1,V2,M3)
		[7]*argField{ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VCEQ, 0xff00000000ff0000, 0xe700000000f80000, // VECTOR COMPARE EQUAL (VCEQ V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VCH, 0xff00000000ff0000, 0xe700000000fb0000, // VECTOR COMPARE HIGH (VCH V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VCHL, 0xff00000000ff0000, 0xe700000000f90000, // VECTOR COMPARE HIGH LOGICAL (VCHL V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VCSPH, 0xff00000000ff0000, 0xe6000000007d0000, // VECTOR CONVERT HFP TO SCALED DECIMAL (VCSPH V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VCVB, 0xff00000000ff0000, 0xe600000000500000, // VECTOR CONVERT TO BINARY (VCVB R1,V2,M3[,M4])
		[7]*argField{ap_Reg_8_11, ap_VecReg_12_15, ap_Mask_24_27, ap_Mask_28_31, ap_ImmUnsigned_36_39}},
	{VCVBG, 0xff00000000ff0000, 0xe600000000520000, // VECTOR CONVERT TO BINARY (VCVBG R1,V2,M3[,M4])
		[7]*argField{ap_Reg_8_11, ap_VecReg_12_15, ap_Mask_24_27, ap_Mask_28_31, ap_ImmUnsigned_36_39}},
	{VCVD, 0xff00000000ff0000, 0xe600000000580000, // VECTOR CONVERT TO DECIMAL (VCVD V1,R2,I3,M4)
		[7]*argField{ap_VecReg_8_11, ap_Reg_12_15, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VCVDG, 0xff00000000ff0000, 0xe6000000005a0000, // VECTOR CONVERT TO DECIMAL (VCVDG V1,R2,I3,M4)
		[7]*argField{ap_VecReg_8_11, ap_Reg_12_15, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VCLZDP, 0xff00000000ff0000, 0xe600000000510000, // VECTOR COUNT LEADING ZERO DIGITS (VCLZDP V1,V2,M3)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VCLZ, 0xff00000000ff0000, 0xe700000000530000, // VECTOR COUNT LEADING ZEROS (VCLZ V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCTZ, 0xff00000000ff0000, 0xe700000000520000, // VECTOR COUNT TRAILING ZEROS (VCTZ V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VDP, 0xff00000000ff0000, 0xe6000000007a0000, // VECTOR DIVIDE DECIMAL (VDP V1,V2,V3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VEC, 0xff00000000ff0000, 0xe700000000db0000, // VECTOR ELEMENT COMPARE (VEC V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VECL, 0xff00000000ff0000, 0xe700000000d90000, // VECTOR ELEMENT COMPARE LOGICAL (VECL V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VERIM, 0xff00000000ff0000, 0xe700000000720000, // VECTORELEMENTROTATEANDINSERTUNDER MASK (VERIM V1,V2,V3,I4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_24_31, ap_ImmUnsigned_36_39}},
	{VERLL, 0xff00000000ff0000, 0xe700000000330000, // VECTOR ELEMENT ROTATE LEFT LOGICAL (VERLL V1,V3,D2(B2)[,M4])
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VERLLV, 0xff00000000ff0000, 0xe700000000730000, // VECTOR ELEMENT ROTATE LEFT LOGICAL (VERLLV V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VESLV, 0xff00000000ff0000, 0xe700000000700000, // VECTOR ELEMENT SHIFT LEFT (VESLV V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VESL, 0xff00000000ff0000, 0xe700000000300000, // VECTOR ELEMENT SHIFT LEFT (VESL V1,V3,D2(B2)[,M4])
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VESRA, 0xff00000000ff0000, 0xe7000000003a0000, // VECTOR ELEMENT SHIFT RIGHT ARITHMETIC (VESRA V1,V3,D2(B2)[,M4])
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VESRAV, 0xff00000000ff0000, 0xe7000000007a0000, // VECTOR ELEMENT SHIFT RIGHT ARITHMETIC (VESRAV V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VESRL, 0xff00000000ff0000, 0xe700000000380000, // VECTOR ELEMENT SHIFT RIGHT LOGICAL (VESRL V1,V3,D2(B2)[,M4])
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VESRLV, 0xff00000000ff0000, 0xe700000000780000, // VECTOR ELEMENT SHIFT RIGHT LOGICAL (VESRLV V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VX, 0xff00000000ff0000, 0xe7000000006d0000, // VECTOR EXCLUSIVE OR (VX V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VFAE, 0xff00000000ff0000, 0xe700000000820000, // VECTOR FIND ANY ELEMENT EQUAL (VFAE V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VFEE, 0xff00000000ff0000, 0xe700000000800000, // VECTOR FIND ELEMENT EQUAL (VFEE V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VFENE, 0xff00000000ff0000, 0xe700000000810000, // VECTOR FIND ELEMENT NOT EQUAL (VFENE V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VFA, 0xff00000000ff0000, 0xe700000000e30000, // VECTOR FP ADD (VFA V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{WFK, 0xff00000000ff0000, 0xe700000000ca0000, // VECTOR FP COMPARE AND SIGNAL SCALAR (WFK V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15}},
	{VFCE, 0xff00000000ff0000, 0xe700000000e80000, // VECTOR FP COMPARE EQUAL (VFCE V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VFCH, 0xff00000000ff0000, 0xe700000000eb0000, // VECTOR FP COMPARE HIGH (VFCH V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VFCHE, 0xff00000000ff0000, 0xe700000000ea0000, // VECTOR FP COMPARE HIGH OR EQUAL (VFCHE V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{WFC, 0xff00000000ff0000, 0xe700000000cb0000, // VECTOR FP COMPARE SCALAR (WFC V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15}},
	{VCLFNH, 0xff00000000ff0000, 0xe600000000560000, // VECTOR FP CONVERT AND LENGTHEN FROM NNP HIGH (VCLFNH V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCLFNL, 0xff00000000ff0000, 0xe6000000005e0000, // VECTOR FP CONVERT AND LENGTHEN FROM NNP LOW (VCLFNL V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCRNF, 0xff00000000ff0000, 0xe600000000750000, // VECTOR FP CONVERT AND ROUND TO NNP (VCRNF V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VCFPS, 0xff00000000ff0000, 0xe700000000c30000, // VECTOR FP CONVERT FROM FIXED (VCFPS V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCDG, 0xff00000000ff0000, 0xe700000000c30000, // VECTOR FP CONVERT FROM FIXED 64-BIT (VCDG V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCFPL, 0xff00000000ff0000, 0xe700000000c10000, // VECTOR FP CONVERT FROM LOGICAL (VCFPL V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCDLG, 0xff00000000ff0000, 0xe700000000c10000, // VECTOR FP CONVERT FROM LOGICAL 64-BIT (VCDLG V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCFN, 0xff00000000ff0000, 0xe6000000005d0000, // VECTOR FP CONVERT FROM NNP (VCFN V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCSFP, 0xff00000000ff0000, 0xe700000000c20000, // VECTOR FP CONVERT TO FIXED (VCSFP V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCGD, 0xff00000000ff0000, 0xe700000000c20000, // VECTOR FP CONVERT TO FIXED 64-BIT (VCGD V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCLFP, 0xff00000000ff0000, 0xe700000000c00000, // VECTOR FP CONVERT TO LOGICAL (VCLFP V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCLGD, 0xff00000000ff0000, 0xe700000000c00000, // VECTOR FP CONVERT TO LOGICAL 64-BIT (VCLGD V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VCNF, 0xff00000000ff0000, 0xe600000000550000, // VECTOR FP CONVERT TO NNP (VCNF V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VFD, 0xff00000000ff0000, 0xe700000000e50000, // VECTOR FP DIVIDE (VFD V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VFLL, 0xff00000000ff0000, 0xe700000000c40000, // VECTOR FP LOAD LENGTHENED (VFLL V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VFLR, 0xff00000000ff0000, 0xe700000000c50000, // VECTOR FP LOAD ROUNDED (VFLR V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VFMAX, 0xff00000000ff0000, 0xe700000000ef0000, // VECTOR FP MAXIMUM (VFMAX V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VFMIN, 0xff00000000ff0000, 0xe700000000ee0000, // VECTOR FP MINIMUM (VFMIN V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VFM, 0xff00000000ff0000, 0xe700000000e70000, // VECTOR FP MULTIPLY (VFM V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VFMA, 0xff00000000ff0000, 0xe7000000008f0000, // VECTOR FP MULTIPLY AND ADD (VFMA V1,V2,V3,V4,M5,M6)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_28_31, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VFMS, 0xff00000000ff0000, 0xe7000000008e0000, // VECTOR FP MULTIPLY AND SUBTRACT (VFMS V1,V2,V3,V4,M5,M6)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_28_31, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VFNMA, 0xff00000000ff0000, 0xe7000000009f0000, // VECTOR FP NEGATIVE MULTIPLY AND ADD (VFNMA V1,V2,V3,V4,M5,M6)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_28_31, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VFNMS, 0xff00000000ff0000, 0xe7000000009e0000, // VECTOR FP NEGATIVE MULTIPLY AND SUBTRACT (VFNMS V1,V2,V3,V4,M5,M6)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_28_31, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VFPSO, 0xff00000000ff0000, 0xe700000000cc0000, // VECTOR FP PERFORM SIGN OPERATION (VFPSO V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VFSQ, 0xff00000000ff0000, 0xe700000000ce0000, // VECTOR FP SQUARE ROOT (VFSQ V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VFS, 0xff00000000ff0000, 0xe700000000e20000, // VECTOR FP SUBTRACT (VFS V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VFTCI, 0xff00000000ff0000, 0xe7000000004a0000, // VECTOR FP TEST DATA CLASS IMMEDIATE (VFTCI V1,V2,I3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_16_27, ap_Mask_32_35, ap_Mask_28_31, ap_ImmUnsigned_36_39}},
	{VGFM, 0xff00000000ff0000, 0xe700000000b40000, // VECTOR GALOIS FIELD MULTIPLY SUM (VGFM V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VGFMA, 0xff00000000ff0000, 0xe700000000bc0000, // VECTOR GALOIS FIELD MULTIPLY SUM AND ACCUMULATE (VGFMA V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VGEF, 0xff00000000ff0000, 0xe700000000130000, // VECTOR GATHER ELEMENT (32) (VGEF V1,D2(V2,B2),M3)
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_VecReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VGEG, 0xff00000000ff0000, 0xe700000000120000, // VECTOR GATHER ELEMENT (64) (VGEG V1,D2(V2,B2),M3)
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_VecReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VGBM, 0xff00000000ff0000, 0xe700000000440000, // VECTOR GENERATE BYTE MASK (VGBM V1,I2)
		[7]*argField{ap_VecReg_8_11, ap_ImmUnsigned_16_31, ap_ImmUnsigned_36_39}},
	{VGM, 0xff00000000ff0000, 0xe700000000460000, // VECTOR GENERATE MASK (VGM V1,I2,I3,M4)
		[7]*argField{ap_VecReg_8_11, ap_ImmUnsigned_16_23, ap_ImmUnsigned_24_31, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VISTR, 0xff00000000ff0000, 0xe7000000005c0000, // VECTOR ISOLATE STRING (VISTR V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VL, 0xff00000000ff0000, 0xe700000000060000, // VECTOR LOAD (VL V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLR, 0xff00000000ff0000, 0xe700000000560000, // VECTOR LOAD (VLR V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VLREP, 0xff00000000ff0000, 0xe700000000050000, // VECTOR LOAD AND REPLICATE (VLREP V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEBRH, 0xff00000000ff0000, 0xe600000000010000, // VECTOR LOAD BYTE REVERSED ELEMENT (16) (VLEBRH V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEBRF, 0xff00000000ff0000, 0xe600000000030000, // VECTOR LOAD BYTE REVERSED ELEMENT (32) (VLEBRF V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEBRG, 0xff00000000ff0000, 0xe600000000020000, // VECTOR LOAD BYTE REVERSED ELEMENT (64) (VLEBRG V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLBRREP, 0xff00000000ff0000, 0xe600000000050000, // VECTOR LOAD BYTE REVERSED ELEMENT AND REPLICATE (VLBRREP V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLLEBRZ, 0xff00000000ff0000, 0xe600000000040000, // VECTOR LOAD BYTE REVERSED ELEMENT AND ZERO (VLLEBRZ V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLBR, 0xff00000000ff0000, 0xe600000000060000, // VECTOR LOAD BYTE REVERSED ELEMENTS (VLBR V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLC, 0xff00000000ff0000, 0xe700000000de0000, // VECTOR LOAD COMPLEMENT (VLC V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VLEH, 0xff00000000ff0000, 0xe700000000010000, // VECTOR LOAD ELEMENT (16) (VLEH V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEF, 0xff00000000ff0000, 0xe700000000030000, // VECTOR LOAD ELEMENT (32) (VLEF V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEG, 0xff00000000ff0000, 0xe700000000020000, // VECTOR LOAD ELEMENT (64) (VLEG V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEB, 0xff00000000000000, 0xe700000000000000, // VECTOR LOAD ELEMENT (8) (VLEB V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEIH, 0xff00000000ff0000, 0xe700000000410000, // VECTOR LOAD ELEMENT IMMEDIATE (16) (VLEIH V1,I2,M3)
		[7]*argField{ap_VecReg_8_11, ap_ImmUnsigned_16_31, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEIF, 0xff00000000ff0000, 0xe700000000430000, // VECTOR LOAD ELEMENT IMMEDIATE (32) (VLEIF V1,I2,M3)
		[7]*argField{ap_VecReg_8_11, ap_ImmUnsigned_16_31, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEIG, 0xff00000000ff0000, 0xe700000000420000, // VECTOR LOAD ELEMENT IMMEDIATE (64) (VLEIG V1,I2,M3)
		[7]*argField{ap_VecReg_8_11, ap_ImmUnsigned_16_31, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLEIB, 0xff00000000ff0000, 0xe700000000400000, // VECTOR LOAD ELEMENT IMMEDIATE (8) (VLEIB V1,I2,M3)
		[7]*argField{ap_VecReg_8_11, ap_ImmUnsigned_16_31, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLER, 0xff00000000ff0000, 0xe600000000070000, // VECTOR LOAD ELEMENTS REVERSED (VLER V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VFI, 0xff00000000ff0000, 0xe700000000c70000, // VECTOR LOAD FP INTEGER (VFI V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VLGV, 0xff00000000ff0000, 0xe700000000210000, // VECTOR LOAD GR FROM VR ELEMENT (VLGV R1,V3,D2(B2),M4)
		[7]*argField{ap_Reg_8_11, ap_VecReg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLIP, 0xff00000000ff0000, 0xe600000000490000, // VECTOR LOAD IMMEDIATE DECIMAL (VLIP V1,I2,I3)
		[7]*argField{ap_VecReg_8_11, ap_ImmUnsigned_16_31, ap_ImmUnsigned_32_35, ap_ImmUnsigned_36_39}},
	{VLLEZ, 0xff00000000ff0000, 0xe700000000040000, // VECTOR LOAD LOGICAL ELEMENT AND ZERO (VLLEZ V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLM, 0xff00000000ff0000, 0xe700000000360000, // VECTOR LOAD MULTIPLE (VLM V1,V3,D2(B2)[,M4])
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLP, 0xff00000000ff0000, 0xe700000000df0000, // VECTOR LOAD POSITIVE (VLP V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VLRL, 0xff00000000ff0000, 0xe600000000350000, // VECTOR LOAD RIGHTMOST WITH LENGTH (VLRL V1,D2(B2),I3)
		[7]*argField{ap_VecReg_32_35, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15, ap_ImmUnsigned_36_39}},
	{VLRLR, 0xff00000000ff0000, 0xe600000000370000, // VECTOR LOAD RIGHTMOST WITH LENGTH (VLRLR V1,R3,D2(B2))
		[7]*argField{ap_VecReg_32_35, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_36_39}},
	{VLBB, 0xff00000000ff0000, 0xe700000000070000, // VECTOR LOAD TO BLOCK BOUNDARY (VLBB V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VLVG, 0xff00000000ff0000, 0xe700000000220000, // VECTOR LOAD VR ELEMENT FROM GR (VLVG V1,R3,D2(B2))
		[7]*argField{ap_VecReg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_36_39}},
	{VLVGP, 0xff00000000ff0000, 0xe700000000620000, // VECTOR LOAD VR FROM GRS DISJOINT (VLVGP V1,R2,R3)
		[7]*argField{ap_VecReg_8_11, ap_Reg_12_15, ap_Reg_16_19, ap_ImmUnsigned_36_39}},
	{VLL, 0xff00000000ff0000, 0xe700000000370000, // VECTOR LOAD WITH LENGTH (VLL V1,R3,D2(B2))
		[7]*argField{ap_VecReg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_36_39}},
	{VMX, 0xff00000000ff0000, 0xe700000000ff0000, // VECTOR MAXIMUM (VMX V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMXL, 0xff00000000ff0000, 0xe700000000fd0000, // VECTOR MAXIMUM LOGICAL (VMXL V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMRH, 0xff00000000ff0000, 0xe700000000610000, // VECTOR MERGE HIGH (VMRH V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMRL, 0xff00000000ff0000, 0xe700000000600000, // VECTOR MERGE LOW (VMRL V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMN, 0xff00000000ff0000, 0xe700000000fe0000, // VECTOR MINIMUM (VMN V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMNL, 0xff00000000ff0000, 0xe700000000fc0000, // VECTOR MINIMUM LOGICAL (VMNL V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMAE, 0xff00000000ff0000, 0xe700000000ae0000, // VECTOR MULTIPLY AND ADD EVEN (VMAE V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VMAH, 0xff00000000ff0000, 0xe700000000ab0000, // VECTOR MULTIPLY AND ADD HIGH (VMAH V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VMALE, 0xff00000000ff0000, 0xe700000000ac0000, // VECTOR MULTIPLY AND ADD LOGICAL EVEN (VMALE V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VMALH, 0xff00000000ff0000, 0xe700000000a90000, // VECTOR MULTIPLY AND ADD LOGICAL HIGH (VMALH V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VMALO, 0xff00000000ff0000, 0xe700000000ad0000, // VECTOR MULTIPLY AND ADD LOGICAL ODD (VMALO V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VMAL, 0xff00000000ff0000, 0xe700000000aa0000, // VECTOR MULTIPLY AND ADD LOW (VMAL V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VMAO, 0xff00000000ff0000, 0xe700000000af0000, // VECTOR MULTIPLY AND ADD ODD (VMAO V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VMSP, 0xff00000000ff0000, 0xe600000000790000, // VECTOR MULTIPLY AND SHIFT DECIMAL (VMSP V1,V2,V3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VMP, 0xff00000000ff0000, 0xe600000000780000, // VECTOR MULTIPLY DECIMAL (VMP V1,V2,V3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VME, 0xff00000000ff0000, 0xe700000000a60000, // VECTOR MULTIPLY EVEN (VME V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMH, 0xff00000000ff0000, 0xe700000000a30000, // VECTOR MULTIPLY HIGH (VMH V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMLE, 0xff00000000ff0000, 0xe700000000a40000, // VECTOR MULTIPLY LOGICAL EVEN (VMLE V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMLH, 0xff00000000ff0000, 0xe700000000a10000, // VECTOR MULTIPLY LOGICAL HIGH (VMLH V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMLO, 0xff00000000ff0000, 0xe700000000a50000, // VECTOR MULTIPLY LOGICAL ODD (VMLO V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VML, 0xff00000000ff0000, 0xe700000000a20000, // VECTOR MULTIPLY LOW (VML V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMO, 0xff00000000ff0000, 0xe700000000a70000, // VECTOR MULTIPLY ODD (VMO V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VMSL, 0xff00000000ff0000, 0xe700000000b80000, // VECTOR MULTIPLY SUM LOGICAL (VMSL V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VNN, 0xff00000000ff0000, 0xe7000000006e0000, // VECTOR NAND (VNN V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VNO, 0xff00000000ff0000, 0xe7000000006b0000, // VECTOR NOR (VNO V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VNX, 0xff00000000ff0000, 0xe7000000006c0000, // VECTOR NOT EXCLUSIVE OR (VNX V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VO, 0xff00000000ff0000, 0xe7000000006a0000, // VECTOR OR (VO V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VOC, 0xff00000000ff0000, 0xe7000000006f0000, // VECTOR OR WITH COMPLEMENT (VOC V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VPK, 0xff00000000ff0000, 0xe700000000940000, // VECTOR PACK (VPK V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VPKLS, 0xff00000000ff0000, 0xe700000000950000, // VECTOR PACK LOGICAL SATURATE (VPKLS V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VPKS, 0xff00000000ff0000, 0xe700000000970000, // VECTOR PACK SATURATE (VPKS V1,V2,V3,M4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VPKZ, 0xff00000000ff0000, 0xe600000000340000, // VECTOR PACK ZONED (VPKZ V1,D2(B2),I3)
		[7]*argField{ap_VecReg_32_35, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15, ap_ImmUnsigned_36_39}},
	{VPKZR, 0xff00000000ff0000, 0xe600000000700000, // VECTOR PACK ZONED REGISTER (VPKZR V1,V2,V3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VPSOP, 0xff00000000ff0000, 0xe6000000005b0000, // VECTOR PERFORM SIGN OPERATION DECIMAL (VPSOP V1,V2,I3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_28_35, ap_ImmUnsigned_16_23, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VPERM, 0xff00000000ff0000, 0xe7000000008c0000, // VECTOR PERMUTE (VPERM V1,V2,V3,V4,M5,M6)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_28_31, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VPDI, 0xff00000000ff0000, 0xe700000000840000, // VECTOR PERMUTE DOUBLEWORD IMMEDIATE (VPDI V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VPOPCT, 0xff00000000ff0000, 0xe700000000500000, // VECTOR POPULATION COUNT (VPOPCT V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VRP, 0xff00000000ff0000, 0xe6000000007b0000, // VECTOR REMAINDER DECIMAL (VRP V1,V2,V3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VREP, 0xff00000000ff0000, 0xe7000000004d0000, // VECTOR REPLICATE (VREP V1,V3,I2,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_16_31, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VREPI, 0xff00000000ff0000, 0xe700000000450000, // VECTOR REPLICATE IMMEDIATE (VREPI V1,I2,M3)
		[7]*argField{ap_VecReg_8_11, ap_ImmUnsigned_16_31, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSCEF, 0xff00000000ff0000, 0xe7000000001b0000, // VECTOR SCATTER ELEMENT (32) (VSCEF V1,D2(V2,B2),M3)
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_VecReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSCEG, 0xff00000000ff0000, 0xe7000000001a0000, // VECTOR SCATTER ELEMENT (64) (VSCEG V1,D2(V2,B2),M3)
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_VecReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSEL, 0xff00000000ff0000, 0xe7000000008d0000, // VECTOR SELECT (VSEL V1,V2,V3,V4,M5,M6)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_28_31, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VSDP, 0xff00000000ff0000, 0xe6000000007e0000, // VECTOR SHIFT AND DIVIDE DECIMAL (VSDP V1,V2,V3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VSRP, 0xff00000000ff0000, 0xe600000000590000, // VECTOR SHIFT AND ROUND DECIMAL (VSRP V1,V2,I3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_28_35, ap_ImmUnsigned_16_23, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VSRPR, 0xff00000000ff0000, 0xe600000000720000, // VECTOR SHIFT AND ROUND DECIMAL REGISTER (VSRPR V1,V2,V3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VSL, 0xff00000000ff0000, 0xe700000000740000, // VECTOR SHIFT LEFT (VSL V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSLB, 0xff00000000ff0000, 0xe700000000750000, // VECTOR SHIFT LEFT BY BYTE (VSLB V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSLD, 0xff00000000ff0000, 0xe700000000860000, // VECTOR SHIFT LEFT DOUBLE BY BIT (VSLD V1,V2,V3,I4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_24_31, ap_ImmUnsigned_36_39}},
	{VSLDB, 0xff00000000ff0000, 0xe700000000770000, // VECTOR SHIFT LEFT DOUBLE BY BYTE (VSLDB V1,V2,V3,I4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_24_31, ap_ImmUnsigned_36_39}},
	{VSRA, 0xff00000000ff0000, 0xe7000000007e0000, // VECTOR SHIFT RIGHT ARITHMETIC (VSRA V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSRAB, 0xff00000000ff0000, 0xe7000000007f0000, // VECTOR SHIFT RIGHT ARITHMETIC BY BYTE (VSRAB V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSRD, 0xff00000000ff0000, 0xe700000000870000, // VECTOR SHIFT RIGHT DOUBLE BY BIT (VSRD V1,V2,V3,I4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_24_31, ap_ImmUnsigned_36_39}},
	{VSRL, 0xff00000000ff0000, 0xe7000000007c0000, // VECTOR SHIFT RIGHT LOGICAL (VSRL V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSRLB, 0xff00000000ff0000, 0xe7000000007d0000, // VECTOR SHIFT RIGHT LOGICAL BY BYTE (VSRLB V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSEG, 0xff00000000ff0000, 0xe7000000005f0000, // VECTOR SIGN EXTEND TO DOUBLEWORD (VSEG V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VST, 0xff00000000ff0000, 0xe7000000000e0000, // VECTOR STORE (VST V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTEBRH, 0xff00000000ff0000, 0xe600000000090000, // VECTOR STORE BYTE REVERSED ELEMENT(16) (VSTEBRH V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTEBRF, 0xff00000000ff0000, 0xe6000000000b0000, // VECTOR STORE BYTE REVERSED ELEMENT(32) (VSTEBRF V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTEBRG, 0xff00000000ff0000, 0xe6000000000a0000, // VECTOR STORE BYTE REVERSED ELEMENT(64) (VSTEBRG V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTBR, 0xff00000000ff0000, 0xe6000000000e0000, // VECTOR STORE BYTE REVERSED ELEMENTS (VSTBR V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTEH, 0xff00000000ff0000, 0xe700000000090000, // VECTOR STORE ELEMENT (16) (VSTEH V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTEF, 0xff00000000ff0000, 0xe7000000000b0000, // VECTOR STORE ELEMENT (32) (VSTEF V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTEG, 0xff00000000ff0000, 0xe7000000000a0000, // VECTOR STORE ELEMENT (64) (VSTEG V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTEB, 0xff00000000ff0000, 0xe700000000080000, // VECTOR STORE ELEMENT (8) (VSTEB V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTER, 0xff00000000ff0000, 0xe6000000000f0000, // VECTOR STORE ELEMENTS REVERSED (VSTER V1,D2(X2,B2)[,M3])
		[7]*argField{ap_VecReg_8_11, ap_DispUnsigned_20_31, ap_IndexReg_12_15, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTM, 0xff00000000ff0000, 0xe7000000003e0000, // VECTOR STORE MULTIPLE (VSTM V1,V3,D2(B2)[,M4])
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSTRL, 0xff00000000ff0000, 0xe6000000003d0000, // VECTOR STORE RIGHTMOST WITH LENGTH (VSTRL V1,D2(B2),I3)
		[7]*argField{ap_VecReg_32_35, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15, ap_ImmUnsigned_36_39}},
	{VSTRLR, 0xff00000000ff0000, 0xe6000000003f0000, // VECTOR STORE RIGHTMOST WITH LENGTH (VSTRLR V1,R3,D2(B2))
		[7]*argField{ap_VecReg_32_35, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_36_39}},
	{VSTL, 0xff00000000ff0000, 0xe7000000003f0000, // VECTOR STORE WITH LENGTH (VSTL V1,R3,D2(B2))
		[7]*argField{ap_VecReg_8_11, ap_Reg_12_15, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_36_39}},
	{VSTRC, 0xff00000000ff0000, 0xe7000000008a0000, // VECTOR STRING RANGE COMPARE (VSTRC V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VSTRS, 0xff00000000ff0000, 0xe7000000008b0000, // VECTOR STRING SEARCH (VSTRS V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VS, 0xff00000000ff0000, 0xe700000000f70000, // VECTOR SUBTRACT (VS V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSCBI, 0xff00000000ff0000, 0xe700000000f50000, // VECTOR SUBTRACT COMPUTE BORROW INDICATION (VSCBI V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSP, 0xff00000000ff0000, 0xe600000000730000, // VECTOR SUBTRACT DECIMAL (VSP V1,V2,V3,I4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_ImmUnsigned_28_35, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VSBCBI, 0xff00000000ff0000, 0xe700000000bd0000, // VECTOR SUBTRACT WITH BORROW COMPUTE BORROW INDICATION (VSBCBI V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VSBI, 0xff00000000ff0000, 0xe700000000bf0000, // VECTOR SUBTRACT WITH BORROW INDICATION (VSBI V1,V2,V3,V4,M5)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_VecReg_32_35, ap_Mask_20_23, ap_ImmUnsigned_36_39}},
	{VSUMG, 0xff00000000ff0000, 0xe700000000650000, // VECTOR SUM ACROSS DOUBLEWORD (VSUMG V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSUMQ, 0xff00000000ff0000, 0xe700000000670000, // VECTOR SUM ACROSS QUADWORD (VSUMQ V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VSUM, 0xff00000000ff0000, 0xe700000000640000, // VECTOR SUM ACROSS WORD (VSUM V1,V2,V3,M4)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_VecReg_16_19, ap_Mask_32_35, ap_ImmUnsigned_36_39}},
	{VTP, 0xff00000000ff0000, 0xe6000000005f0000, // VECTOR TEST DECIMAL (VTP V1)
		[7]*argField{ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VTM, 0xff00000000ff0000, 0xe700000000d80000, // VECTOR TEST UNDER MASK (VTM V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VUPH, 0xff00000000ff0000, 0xe700000000d70000, // VECTOR UNPACK HIGH (VUPH V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VUPLH, 0xff00000000ff0000, 0xe700000000d50000, // VECTOR UNPACK LOGICAL HIGH (VUPLH V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VUPLL, 0xff00000000ff0000, 0xe700000000d40000, // VECTOR UNPACK LOGICAL LOW (VUPLL V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VUPL, 0xff00000000ff0000, 0xe700000000d60000, // VECTOR UNPACK LOW (VUPL V1,V2)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_ImmUnsigned_36_39}},
	{VUPKZ, 0xff00000000ff0000, 0xe6000000003c0000, // VECTOR UNPACK ZONED (VUPKZ V1,D2(B2),I3)
		[7]*argField{ap_VecReg_32_35, ap_DispUnsigned_20_31, ap_BaseReg_16_19, ap_ImmUnsigned_8_15, ap_ImmUnsigned_36_39}},
	{VUPKZH, 0xff00000000ff0000, 0xe600000000540000, // VECTOR UNPACK ZONED HIGH (VUPKZH V1,V2,M3)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{VUPKZL, 0xff00000000ff0000, 0xe6000000005c0000, // VECTOR UNPACK ZONED LOW (VUPKZL V1,V2,M3)
		[7]*argField{ap_VecReg_8_11, ap_VecReg_12_15, ap_Mask_24_27, ap_ImmUnsigned_36_39}},
	{ZAP, 0xff00000000000000, 0xf800000000000000, // ZERO AND ADD (ZAP D1(L1,B1),D2(L2,B2))
		[7]*argField{ap_DispUnsigned_20_31, ap_Len_8_11, ap_BaseReg_16_19, ap_DispUnsigned_36_47, ap_Len_12_15, ap_BaseReg_32_35}},
}
